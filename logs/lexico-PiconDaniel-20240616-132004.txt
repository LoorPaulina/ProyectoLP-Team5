Token: tipo=COMENTARIO, valor='Hash utilizado para el grafo'
Token: tipo=VARIABLE, valor='grafo'
Token: tipo=IGUAL, valor='='
Token: tipo=LLAVE_L, valor='{'
Token: tipo=CADENA, valor=''A''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=LLAVE_L, valor='{'
Token: tipo=CADENA, valor=''B''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='1'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''C''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='4'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''B''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=LLAVE_L, valor='{'
Token: tipo=CADENA, valor=''A''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='1'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''C''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='2'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''D''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='5'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''C''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=LLAVE_L, valor='{'
Token: tipo=CADENA, valor=''A''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='4'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''B''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='2'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''D''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='1'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''D''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=LLAVE_L, valor='{'
Token: tipo=CADENA, valor=''B''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='5'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''C''
Token: tipo=ASIGNA_HASH, valor='=>'
Token: tipo=ENTERO, valor='1'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=COMENTARIO, valor='Implementar el algoritmo de Dijkstra'
Token: tipo=DEF, valor='def'
Token: tipo=VARIABLE, valor='dijkstra'
Token: tipo=PARENTESIS_L, valor='('
Token: tipo=VARIABLE, valor='grafo'
Token: tipo=COMA, valor=','
Token: tipo=VARIABLE, valor='inicio'
Token: tipo=PARENTESIS_R, valor=')'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=IGUAL, valor='='
Token: tipo=LLAVE_L, valor='{'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=COMENTARIO, valor='La distancia mínima conocida desde el inicio a cada nodo'
Token: tipo=VARIABLE, valor='predecesores'
Token: tipo=IGUAL, valor='='
Token: tipo=LLAVE_L, valor='{'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=COMENTARIO, valor='El camino para llegar a cada nodo'
Token: tipo=VARIABLE, valor='nodos'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='grafo'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=VARIABLE, valor='keys'
Token: tipo=COMENTARIO, valor='Lista de todos los nodos'
Token: tipo=VARIABLE, valor='grafo'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=EACH, valor='each'
Token: tipo=VARIABLE, valor='do'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=COMA, valor=','
Token: tipo=VARIABLE, valor='_'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='Float'
Token: tipo=IGUAL_DOBLEP, valor=':'
Token: tipo=IGUAL_DOBLEP, valor=':'
Token: tipo=VARIABLE, valor='INFINITY'
Token: tipo=VARIABLE, valor='predecesores'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=IGUAL, valor='='
Token: tipo=NIL, valor='nil'
Token: tipo=END, valor='end'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='inicio'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=IGUAL, valor='='
Token: tipo=ENTERO, valor='0'
Token: tipo=UNTIL, valor='until'
Token: tipo=VARIABLE, valor='nodos'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=VARIABLE, valor='empty'
Token: tipo=PREGUNTA, valor='?'
Token: tipo=VARIABLE, valor='nodo_mas_cercano'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='nodos'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=VARIABLE, valor='min_by'
Token: tipo=LLAVE_L, valor='{'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=VARIABLE, valor='nodos'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=VARIABLE, valor='delete'
Token: tipo=PARENTESIS_L, valor='('
Token: tipo=VARIABLE, valor='nodo_mas_cercano'
Token: tipo=PARENTESIS_R, valor=')'
Token: tipo=VARIABLE, valor='grafo'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='nodo_mas_cercano'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=EACH, valor='each'
Token: tipo=VARIABLE, valor='do'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='vecino'
Token: tipo=COMA, valor=','
Token: tipo=VARIABLE, valor='peso'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='alt'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='nodo_mas_cercano'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=MAS, valor='+'
Token: tipo=VARIABLE, valor='peso'
Token: tipo=IF, valor='if'
Token: tipo=VARIABLE, valor='alt'
Token: tipo=MENOR_QUE, valor='<'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='vecino'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='vecino'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='alt'
Token: tipo=VARIABLE, valor='predecesores'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='vecino'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='nodo_mas_cercano'
Token: tipo=END, valor='end'
Token: tipo=END, valor='end'
Token: tipo=END, valor='end'
Token: tipo=LLAVE_L, valor='{'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=IGUAL_DOBLEP, valor=':'
Token: tipo=VARIABLE, valor='distancias'
Token: tipo=COMA, valor=','
Token: tipo=VARIABLE, valor='predecesores'
Token: tipo=IGUAL_DOBLEP, valor=':'
Token: tipo=VARIABLE, valor='predecesores'
Token: tipo=LLAVE_R, valor='}'
Token: tipo=END, valor='end'
Token: tipo=COMENTARIO, valor='Llamar al algoritmo de Dijkstra desde el nodo 'A''
Token: tipo=VARIABLE, valor='resultado'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='dijkstra'
Token: tipo=PARENTESIS_L, valor='('
Token: tipo=VARIABLE, valor='grafo'
Token: tipo=COMA, valor=','
Token: tipo=CADENA, valor=''A''
Token: tipo=PARENTESIS_R, valor=')'
Token: tipo=COMENTARIO, valor='Mostrar resultados'
Token: tipo=PUTS, valor='puts'
Token: tipo=CADENA, valor='"Distancias desde el nodo 'A':"'
Token: tipo=VARIABLE, valor='resultado'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=SIMBOLO, valor=':distancias'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=EACH, valor='each'
Token: tipo=VARIABLE, valor='do'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=COMA, valor=','
Token: tipo=VARIABLE, valor='distancia'
Token: tipo=PIPELINE, valor='|'
Token: tipo=PUTS, valor='puts'
Token: tipo=CADENA, valor='"Distancia a #{nodo}: #{distancia}"'
Token: tipo=END, valor='end'
Token: tipo=PUTS, valor='puts'
Token: tipo=CADENA, valor='"\nCaminos más cortos desde el nodo 'A':"'
Token: tipo=VARIABLE, valor='resultado'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=SIMBOLO, valor=':predecesores'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=EACH, valor='each'
Token: tipo=VARIABLE, valor='do'
Token: tipo=PIPELINE, valor='|'
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=COMA, valor=','
Token: tipo=VARIABLE, valor='predecesor'
Token: tipo=PIPELINE, valor='|'
Token: tipo=IF, valor='if'
Token: tipo=VARIABLE, valor='predecesor'
Token: tipo=VARIABLE, valor='camino'
Token: tipo=IGUAL, valor='='
Token: tipo=CORCHETE_L, valor='['
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=VARIABLE, valor='actual'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='nodo'
Token: tipo=WHILE, valor='while'
Token: tipo=VARIABLE, valor='actual'
Token: tipo=VARIABLE, valor='camino'
Token: tipo=FLOTANTE, valor='.'
Token: tipo=VARIABLE, valor='unshift'
Token: tipo=PARENTESIS_L, valor='('
Token: tipo=VARIABLE, valor='actual'
Token: tipo=PARENTESIS_R, valor=')'
Token: tipo=VARIABLE, valor='actual'
Token: tipo=IGUAL, valor='='
Token: tipo=VARIABLE, valor='resultado'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=SIMBOLO, valor=':predecesores'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=CORCHETE_L, valor='['
Token: tipo=VARIABLE, valor='actual'
Token: tipo=CORCHETE_R, valor=']'
Token: tipo=END, valor='end'
Token: tipo=PUTS, valor='puts'
Token: tipo=CADENA, valor='"Camino a #{nodo}: #{camino.join(' -> ')}"'
Token: tipo=END, valor='end'
Token: tipo=END, valor='end'
