
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALIAS AND ASIGNA_HASH BARRA BEGIN BREAK CADENA CASE CHOMP CLASS COMA COMENTARIO COMENTARIO_MULTI COMILLA_D COMILLA_S CONCAT CORCHETE_DER CORCHETE_IZ DEF DEFINED_QUESTION DIFERENTE DIVISION DO DOBLE_IGUAL EACH ELSE ELSEIF END ENSURE ENTERO EXCLAMACION_ALTO EXCLAMACION_BAJO EXPONENCIACION FALSE FLOTANTE FOR GETS ID_CLASE IF IGUAL IGUAL_DOBLEP IN INITIALIZE LLAVE_DER LLAVE_IZ MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MODULE MODULO MULTIPLICACION NEWLINE NEXT NIL NOT OR O_SIGNO PARENTESIS_DER PARENTESIS_IZ PORCENTAJE PREGUNTA PRINT PRINTF PUNTO PUTS RAISE REDO RESCUE RETRY RETURN SELF SIMBOLO SORT SUPER TO_F TRES_PUNTOS TRIPLE_IGUAL TRUE UNTIL VARIABLE VARIABLECLASE WHEN WHILE YIELD Y_SIGNOcuerpo : operacionAritmetica\n              | input_concatenacion\n              | asignacion\n              | impresion\n              | impresion_vacia\n              | expresiones_booleanas\n              | solicitudDatosTeclado\n              | hashes\n              | estructura_if\n              | funciones\n              | funcionesEstructuras\n              | array\n              | each_array\n              | comentarios\n              | each_hash\n              | sentencia_while\n              | sentencia_case\n              | sentencias_when\n              | sentencia_until\n              | definicion_clase\n              | entero_a_flotantevalorSimbolo : SIMBOLO \n                    | VARIABLE input_concatenacion : concatenacionSimpleCadena\n                            | concatenacion_funcion  concatenacion_funcion : VARIABLE PUNTO CONCAT PARENTESIS_IZ valorCadena PARENTESIS_DER  valorCadena : CADENA\n                    | VARIABLE concatenacionSimpleCadena : valorCadena MAS valorCadena\n                                 | concatenacionSimpleCadena MAS valorCadenavalorNumerico : FLOTANTE \n                     | ENTEROsoloEnteros : ENTEROentero_a_flotante : VARIABLE PUNTO TO_Foperadores : MAS \n                  | MENOS\n                  | DIVISION\n                  | MULTIPLICACION\n                  | EXPONENCIACION \n                  | MODULOexpresionNumerica : valorNumerico\n                         | operacionAritmetica\n                         | PARENTESIS_IZ operacionAritmetica PARENTESIS_DER\n                         | VARIABLEoperacionAritmetica : expresionNumerica operadores expresionNumericavalor_print : PRINT\n                   | PUTS valores : valor\n               | valor COMA valores\n               | valor estructura_ifUnaLineabooleanos : TRUE\n                | FALSEvalor : CADENA\n             | valorNumerico\n             | VARIABLE\n             | VARIABLECLASE\n             | SIMBOLOimpresion : valor_print valoresasignacion_clase : VARIABLECLASE IGUAL CADENA\n                  | VARIABLECLASE IGUAL expresionNumerica\n                  | VARIABLECLASE IGUAL hashes\n                  | VARIABLECLASE IGUAL array\n                  | VARIABLECLASE IGUAL input_concatenacion\n                  | VARIABLE IGUAL booleanosasignacion : VARIABLE IGUAL CADENA\n                  | VARIABLE IGUAL expresionNumerica\n                  | VARIABLE IGUAL hashes\n                  | VARIABLE IGUAL SIMBOLO\n                  | VARIABLE IGUAL array\n                  | VARIABLE IGUAL input_concatenacion\n                  | VARIABLE IGUAL booleanoselementos_array : elemento_array COMA elementos_array\n                       | elemento_array elemento_array : CADENA\n                      | ENTERO\n                      | FLOTANTE\n                      | array\n                      | VARIABLEarray : CORCHETE_IZ elementos_array CORCHETE_DER\n             | CORCHETE_IZ CORCHETE_DEReach_array : VARIABLE PUNTO DO BARRA VARIABLE BARRA cuerpo_each ENDcuerpo_each : cuerpo\n                   | vaciovacio :  rangos : PARENTESIS_IZ soloEnteros TRES_PUNTOS soloEnteros PARENTESIS_DERcomentarios : COMENTARIO \n                    | COMENTARIO_MULTIimpresion_vacia : PRINT PARENTESIS_IZ PARENTESIS_DER\n                        | PUTS PARENTESIS_IZ PARENTESIS_DER\n                        | PUTSoperadoresComparacion : IGUAL_DOBLEP\n                             | DIFERENTE\n                             | MAYOR_QUE\n                             | MENOR_QUE\n                             | MENOR_IGUAL_QUE\n                             | MAYOR_IGUAL_QUEfuncionesComparacion : AND\n                            | ORexpresiones_booleanas : valorSimbolo operadoresComparacion valorSimbolo \n                             | valorNumerico operadoresComparacion valorNumerico\n                             | rangos TRIPLE_IGUAL ENTERO\n                             | VARIABLE operadoresComparacion VARIABLE\n                             | VARIABLE operadoresComparacion valorNumerico\n                             | valorNumerico operadoresComparacion VARIABLEsolicitudDatosTeclado : GETS \n                            | GETS PUNTO funcionesFormatoImpresion funciones : DEF VARIABLE PARENTESIS_IZ PARENTESIS_DER declaracion END\n                 | DEF VARIABLE PARENTESIS_IZ argumentos PARENTESIS_DER declaracion ENDfuncionesArray : SORT\n                      | FOR EACHfuncionesFormatoImpresion : CHOMPfuncionesNumeros : TO_FfuncionesEstructuras : VARIABLE PUNTO funcionesArray\n                            | VARIABLE PUNTO funcionesNumerosargumentos : VARIABLE\n                    | VARIABLE COMA argumentoscondicionIf : expresiones_booleanas\n                | expresiones_booleanas funcionesComparacion expresiones_booleanasestructura_if : IF condicionIf declaracion ELSE declaracion END\n                    | IF condicionIf declaracion estructura_secundaria_ifestructura_ifUnaLinea : IF condicionIfestructura_secundaria_if : ELSEIF condicionIf declaracion ELSE declaracion END\n                                | ELSEIF condicionIf declaracion estructura_secundaria_ifdeclaracion : operacionAritmetica\n                    | asignacion\n                    | impresion\n                    | impresion_vacia\n                    | expresiones_booleanas\n                    | solicitudDatosTeclado\n                    | hashes\n                    | estructura_if\n                    | asignacion_clase\n                    | sentencia_while\n                    | estructura_ifUnaLineasentencia_while : WHILE expresiones_booleanas DO sentencia_while END\n                      | WHILE expresiones_booleanas DO declaracion END sentencia_case : CASE declaracion sentencia_when ENDsentencias_when : sentencia_when\n                    | sentencia_when sentencias_whensentencia_when : WHEN declaracion IGUAL_DOBLEP declaracionsentencia_until : UNTIL declaracion DO declaracion ENDhashes : LLAVE_IZ elemento_hash LLAVE_DER\n              | LLAVE_IZ LLAVE_DERclaveValor : VARIABLE ASIGNA_HASH valorNumerico\n                  | VARIABLE ASIGNA_HASH CADENA\n                  | CADENA ASIGNA_HASH valorNumerico\n                  | CADENA ASIGNA_HASH CADENAelemento_hash : claveValor\n                     | claveValor COMA claveValoreach_hash : VARIABLE PUNTO EACH DO BARRA each_args_hash declaracion ENDeach_args_hash : VARIABLE COMA VARIABLE BARRA\n                      | VARIABLE BARRAencabezadoClase : CLASS ID_CLASE\n                    | CLASS ID_CLASE MENOR_QUE ID_CLASEdefinicion_clase : encabezadoClase NEWLINE cuerpoVariables NEWLINE DEF INITIALIZE PARENTESIS_IZ argumentos PARENTESIS_DER cuerpoClase ENDcuerpoVariables : asignacion_clase                \n                | asignacion\n                | asignacion_clase NEWLINE cuerpoVariables\n                | asignacion NEWLINE cuerpoVariablescuerpoClase : cuerpoVariables\n                | declaracion\n                | funciones'
    
_lr_action_items = {'VARIABLE':([0,28,29,30,31,32,36,38,39,40,41,44,45,47,50,51,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,78,85,86,94,95,122,126,127,144,145,154,156,161,162,163,164,165,169,173,174,175,177,179,180,182,183,184,185,191,194,196,206,208,209,211,225,226,227,231,235,236,238,246,248,259,260,262,265,271,273,],[26,-22,74,-46,83,-47,-32,92,97,99,107,97,121,121,-31,121,83,-35,-36,-37,-38,-39,-40,133,134,144,-91,-92,-93,-94,-95,-96,83,162,164,121,-117,97,189,133,-102,-103,74,97,-99,-23,-100,-104,-101,92,97,-97,-98,210,107,121,134,121,134,121,121,230,133,121,97,-118,121,189,189,134,247,121,210,121,26,121,267,-152,121,210,-151,280,]),'PRINT':([0,28,36,45,47,50,51,94,95,144,145,161,162,163,164,165,180,183,185,191,206,209,211,235,238,246,248,260,262,271,273,],[30,-22,-32,30,30,-31,30,30,-117,-102,-103,-99,-23,-100,-104,-101,30,30,30,30,30,-118,30,30,30,30,30,-152,30,-151,30,]),'PUTS':([0,28,36,45,47,50,51,94,95,144,145,161,162,163,164,165,180,183,185,191,206,209,211,235,238,246,248,260,262,271,273,],[32,-22,-32,32,32,-31,32,32,-117,-102,-103,-99,-23,-100,-104,-101,32,32,32,32,32,-118,32,32,32,32,32,-152,32,-151,32,]),'GETS':([0,28,36,45,47,50,51,94,95,144,145,161,162,163,164,165,180,183,185,191,206,209,211,235,238,246,248,260,262,271,273,],[37,-22,-32,37,37,-31,37,37,-117,-102,-103,-99,-23,-100,-104,-101,37,37,37,37,37,-118,37,37,37,37,37,-152,37,-151,37,]),'LLAVE_IZ':([0,28,36,45,47,50,51,61,94,95,144,145,161,162,163,164,165,180,182,183,184,185,191,206,209,211,227,235,238,246,248,260,262,271,273,],[38,-22,-32,38,38,-31,38,38,38,-117,-102,-103,-99,-23,-100,-104,-101,38,38,38,38,38,38,38,-118,38,38,38,38,38,38,-152,38,-151,38,]),'IF':([0,28,36,45,47,50,51,71,72,73,74,75,76,94,95,144,145,161,162,163,164,165,180,183,185,191,206,209,211,235,238,246,248,260,262,271,273,],[39,-22,-32,122,122,-31,122,156,-53,-54,-55,-56,-57,122,-117,-102,-103,-99,-23,-100,-104,-101,122,122,122,122,122,-118,122,122,122,39,122,-152,122,-151,122,]),'DEF':([0,224,246,273,],[40,242,40,40,]),'CORCHETE_IZ':([0,41,61,179,182,184,227,246,],[41,41,41,41,41,41,41,41,]),'COMENTARIO':([0,246,],[42,42,]),'COMENTARIO_MULTI':([0,246,],[43,43,]),'WHILE':([0,28,36,45,47,50,51,94,95,144,145,161,162,163,164,165,180,183,185,191,206,209,211,235,238,246,248,260,262,271,273,],[44,-22,-32,44,44,-31,44,44,-117,-102,-103,-99,-23,-100,-104,-101,44,44,44,44,44,-118,44,44,44,44,44,-152,44,-151,44,]),'CASE':([0,246,],[45,45,]),'UNTIL':([0,246,],[47,47,]),'PARENTESIS_IZ':([0,28,30,31,32,36,39,44,45,47,50,51,53,54,55,56,57,58,59,61,78,94,95,99,122,144,145,151,156,161,162,163,164,165,173,174,175,180,182,183,184,185,191,206,208,209,211,227,235,238,246,248,255,260,262,271,273,],[31,-22,77,78,84,-32,98,98,31,31,-31,31,78,-35,-36,-37,-38,-39,-40,78,78,31,-117,177,98,-102,-103,196,98,-99,-23,-100,-104,-101,98,-97,-98,31,78,31,78,31,31,31,98,-118,31,78,31,31,31,31,265,-152,31,-151,31,]),'SIMBOLO':([0,28,29,30,32,36,39,44,45,47,50,51,61,64,65,66,67,68,69,85,94,95,122,144,145,154,156,161,162,163,164,165,173,174,175,180,182,183,185,191,206,208,209,211,227,235,238,246,248,260,262,271,273,],[28,-22,76,-46,-47,-32,28,28,28,28,-31,28,138,-91,-92,-93,-94,-95,-96,28,28,-117,28,-102,-103,76,28,-99,-23,-100,-104,-101,28,-97,-98,28,138,28,28,28,28,28,-118,28,138,28,28,28,28,-152,28,-151,28,]),'FLOTANTE':([0,28,29,30,31,32,36,39,41,44,45,47,50,51,53,54,55,56,57,58,59,61,62,64,65,66,67,68,69,78,86,94,95,122,144,145,154,156,161,162,163,164,165,170,171,173,174,175,179,180,182,183,184,185,191,206,208,209,211,227,235,238,246,248,260,262,271,273,],[50,-22,50,-46,50,-47,-32,50,105,50,50,50,-31,50,50,-35,-36,-37,-38,-39,-40,50,50,-91,-92,-93,-94,-95,-96,50,50,50,-117,50,-102,-103,50,50,-99,-23,-100,-104,-101,50,50,50,-97,-98,105,50,50,50,50,50,50,50,50,-118,50,50,50,50,50,50,-152,50,-151,50,]),'ENTERO':([0,28,29,30,31,32,36,39,41,44,45,47,50,51,53,54,55,56,57,58,59,61,62,64,65,66,67,68,69,78,86,87,94,95,98,122,144,145,154,156,159,161,162,163,164,165,170,171,173,174,175,179,180,182,183,184,185,191,206,208,209,211,227,235,238,246,248,260,262,271,273,],[36,-22,36,-46,81,-47,-32,36,104,36,36,36,-31,36,36,-35,-36,-37,-38,-39,-40,36,36,-91,-92,-93,-94,-95,-96,36,36,165,36,-117,176,36,-102,-103,36,36,176,-99,-23,-100,-104,-101,36,36,36,-97,-98,104,36,36,36,36,36,36,36,36,-118,36,36,36,36,36,36,-152,36,-151,36,]),'WHEN':([0,24,25,27,28,32,36,37,46,50,70,71,72,73,74,75,76,82,83,90,95,101,109,110,111,112,113,114,115,116,117,118,119,120,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,155,157,158,160,161,162,163,164,165,166,167,168,178,183,190,198,199,207,209,217,218,219,220,221,222,228,239,240,246,249,250,263,272,],[51,-24,-25,-27,-22,-90,-32,-105,51,-31,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,-80,51,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-51,-52,-102,-103,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,-79,-121,-29,-49,-121,-120,-118,-64,-59,-60,-61,-62,-63,-140,-135,-136,51,-26,-119,-123,-122,]),'CLASS':([0,246,],[52,52,]),'CADENA':([0,29,30,32,38,41,60,61,127,154,169,170,171,179,182,184,196,227,246,],[27,72,-46,-47,93,103,27,135,27,72,93,203,204,103,135,218,27,135,27,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,27,28,32,36,37,42,43,46,50,70,71,72,73,74,75,76,82,83,90,95,101,110,111,112,113,114,115,116,117,118,119,120,124,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,150,152,155,157,158,160,161,162,163,164,165,166,167,168,178,183,190,197,198,199,207,209,216,217,218,219,220,221,222,228,239,240,241,249,250,253,263,264,266,268,272,281,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-24,-25,-27,-22,-90,-32,-105,-86,-87,-138,-31,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,-80,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-139,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-71,-51,-52,-102,-103,-113,-114,-34,-109,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,-79,-121,-29,-110,-49,-121,-120,-118,-137,-64,-59,-60,-61,-62,-63,-140,-135,-136,-141,-26,-119,-107,-123,-108,-81,-150,-122,-155,]),'END':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,27,28,32,36,37,42,43,46,50,70,71,72,73,74,75,76,82,83,90,95,101,110,111,112,113,114,115,116,117,118,119,120,124,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,150,152,155,157,158,160,161,162,163,164,165,166,167,168,178,181,183,187,188,190,197,198,199,207,209,214,215,216,217,218,219,220,221,222,223,228,234,237,239,240,241,243,244,245,246,249,250,253,254,256,257,258,261,263,264,266,268,269,272,274,275,276,277,278,279,281,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-24,-25,-27,-22,-90,-32,-105,-86,-87,-138,-31,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,-80,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-139,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-71,-51,-52,-102,-103,-113,-114,-34,-109,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,-79,216,-121,-156,-157,-29,-110,-49,-121,-120,-118,239,240,-137,-64,-59,-60,-61,-62,-63,241,-140,250,253,-135,-136,-141,-158,-159,-64,-84,-26,-119,-107,264,266,-82,-83,268,-123,-108,-81,-150,272,-122,-160,281,-161,-162,-132,-125,-155,]),'MAS':([2,23,24,26,27,34,36,49,50,79,81,82,83,110,121,130,131,132,133,134,135,136,158,190,218,219,280,],[-42,54,60,-28,-27,-41,-32,127,-31,-42,-32,-41,-44,-42,-44,54,-42,-30,-28,-28,-27,54,-43,-29,-27,54,-44,]),'MENOS':([2,23,26,34,36,50,79,81,82,83,110,121,130,131,134,136,158,219,280,],[-42,55,-44,-41,-32,-31,-42,-32,-41,-44,-42,-44,55,-42,-44,55,-43,55,-44,]),'DIVISION':([2,23,26,34,36,50,79,81,82,83,110,121,130,131,134,136,158,219,280,],[-42,56,-44,-41,-32,-31,-42,-32,-41,-44,-42,-44,56,-42,-44,56,-43,56,-44,]),'MULTIPLICACION':([2,23,26,34,36,50,79,81,82,83,110,121,130,131,134,136,158,219,280,],[-42,57,-44,-41,-32,-31,-42,-32,-41,-44,-42,-44,57,-42,-44,57,-43,57,-44,]),'EXPONENCIACION':([2,23,26,34,36,50,79,81,82,83,110,121,130,131,134,136,158,219,280,],[-42,58,-44,-41,-32,-31,-42,-32,-41,-44,-42,-44,58,-42,-44,58,-43,58,-44,]),'MODULO':([2,23,26,34,36,50,79,81,82,83,110,121,130,131,134,136,158,219,280,],[-42,59,-44,-41,-32,-31,-42,-32,-41,-44,-42,-44,59,-42,-44,59,-43,59,-44,]),'DO':([24,25,27,28,32,36,37,50,63,70,71,72,73,74,75,76,82,83,90,95,101,108,110,111,112,113,114,115,116,117,118,119,120,125,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,149,155,157,158,160,161,162,163,164,165,166,167,168,178,183,190,198,199,207,209,217,218,219,220,221,222,239,240,249,250,263,272,],[-24,-25,-27,-22,-90,-32,-105,-31,148,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,-80,180,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,185,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-51,-52,-102,-103,195,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,-79,-121,-29,-49,-121,-120,-118,-64,-59,-60,-61,-62,-63,-135,-136,-26,-119,-123,-122,]),'IGUAL_DOBLEP':([24,25,26,27,28,32,33,34,36,37,50,70,71,72,73,74,75,76,82,83,90,95,96,97,101,110,111,112,113,114,115,116,117,118,119,120,121,128,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,155,157,158,160,161,162,163,164,165,166,167,168,178,183,190,198,199,207,209,217,218,219,220,221,222,239,240,249,250,263,272,280,],[-24,-25,64,-27,-22,-90,64,64,-32,-105,-31,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,64,64,-80,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,64,191,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-51,-52,-102,-103,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,-79,-121,-29,-49,-121,-120,-118,-64,-59,-60,-61,-62,-63,-135,-136,-26,-119,-123,-122,64,]),'ELSE':([24,25,27,28,32,36,37,50,70,71,72,73,74,75,76,82,83,90,95,101,110,111,112,113,114,115,116,117,118,119,120,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,155,157,158,160,161,162,163,164,165,166,167,168,172,178,183,190,198,199,207,209,217,218,219,220,221,222,239,240,249,250,251,263,272,],[-24,-25,-27,-22,-90,-32,-105,-31,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,-80,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-51,-52,-102,-103,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,206,-79,-121,-29,-49,-121,-120,-118,-64,-59,-60,-61,-62,-63,-135,-136,-26,-119,262,-123,-122,]),'ELSEIF':([24,25,27,28,32,36,37,50,70,71,72,73,74,75,76,82,83,90,95,101,110,111,112,113,114,115,116,117,118,119,120,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,155,157,158,160,161,162,163,164,165,166,167,168,172,178,183,190,198,199,207,209,217,218,219,220,221,222,239,240,249,250,251,263,272,],[-24,-25,-27,-22,-90,-32,-105,-31,-58,-48,-53,-54,-55,-56,-57,-41,-44,-143,-117,-80,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-51,-52,-102,-103,-50,-88,-43,-89,-99,-23,-100,-104,-101,-106,-111,-142,208,-79,-121,-29,-49,-121,-120,-118,-64,-59,-60,-61,-62,-63,-135,-136,-26,-119,208,-123,-122,]),'NEWLINE':([24,25,27,36,48,50,82,83,90,101,129,130,131,132,133,134,135,136,137,138,139,140,142,143,158,168,178,186,187,188,190,218,219,220,221,222,229,243,244,245,249,278,279,],[-24,-25,-27,-32,126,-31,-41,-44,-143,-80,-153,-45,-42,-30,-28,-44,-65,-66,-67,-68,-69,-70,-51,-52,-43,-142,-79,224,225,226,-29,-59,-60,-61,-62,-63,-154,-158,-159,-64,-26,225,226,]),'IGUAL':([26,121,123,189,280,],[61,182,184,227,227,]),'PUNTO':([26,37,134,],[63,88,193,]),'DIFERENTE':([26,28,33,34,36,50,96,97,121,280,],[65,-22,65,65,-32,-31,65,65,65,65,]),'MAYOR_QUE':([26,28,33,34,36,50,96,97,121,280,],[66,-22,66,66,-32,-31,66,66,66,66,]),'MENOR_QUE':([26,28,33,34,36,50,96,97,121,129,280,],[67,-22,67,67,-32,-31,67,67,67,192,67,]),'MENOR_IGUAL_QUE':([26,28,33,34,36,50,96,97,121,280,],[68,-22,68,68,-32,-31,68,68,68,68,]),'MAYOR_IGUAL_QUE':([26,28,33,34,36,50,96,97,121,280,],[69,-22,69,69,-32,-31,69,69,69,69,]),'PARENTESIS_DER':([27,36,50,77,79,82,83,84,130,131,133,158,176,177,200,210,212,232,252,270,],[-27,-32,-31,157,158,-41,-44,160,-45,-42,-28,-43,-33,211,233,-115,238,249,-116,273,]),'AND':([28,36,50,95,144,145,161,162,163,164,165,],[-22,-32,-31,174,-102,-103,-99,-23,-100,-104,-101,]),'OR':([28,36,50,95,144,145,161,162,163,164,165,],[-22,-32,-31,175,-102,-103,-99,-23,-100,-104,-101,]),'VARIABLECLASE':([28,29,30,32,36,45,47,50,51,94,95,126,144,145,154,161,162,163,164,165,180,183,185,191,206,209,211,225,226,235,238,248,260,262,271,273,],[-22,75,-46,-47,-32,123,123,-31,123,123,-117,123,-102,-103,75,-99,-23,-100,-104,-101,123,123,123,123,123,-118,123,123,123,123,123,123,-152,123,-151,123,]),'TRIPLE_IGUAL':([35,233,],[87,-85,]),'COMA':([36,50,71,72,73,74,75,76,91,101,102,103,104,105,106,107,178,202,203,204,205,210,247,],[-32,-31,154,-53,-54,-55,-56,-57,169,-80,179,-74,-75,-76,-77,-78,-79,-144,-145,-147,-146,236,259,]),'LLAVE_DER':([36,38,50,89,91,201,202,203,204,205,],[-32,90,-31,168,-148,-149,-144,-145,-147,-146,]),'CORCHETE_DER':([41,100,101,102,103,104,105,106,107,178,213,],[101,178,-80,-73,-74,-75,-76,-77,-78,-79,-72,]),'ID_CLASE':([52,192,],[129,229,]),'TRUE':([61,182,227,],[142,142,142,]),'FALSE':([61,182,227,],[143,143,143,]),'EACH':([63,153,],[149,197,]),'TO_F':([63,],[150,]),'CONCAT':([63,193,],[151,151,]),'SORT':([63,],[152,]),'FOR':([63,],[153,]),'TRES_PUNTOS':([80,81,176,],[159,-33,-33,]),'CHOMP':([88,],[167,]),'ASIGNA_HASH':([92,93,],[170,171,]),'BARRA':([148,195,230,247,267,],[194,231,246,260,271,]),'INITIALIZE':([242,],[255,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,246,],[1,257,]),'operacionAritmetica':([0,31,45,47,51,53,61,78,94,180,182,183,184,185,191,206,211,227,235,238,246,248,262,273,],[2,79,110,110,110,131,131,79,110,110,131,110,131,110,110,110,110,131,110,110,2,110,110,110,]),'input_concatenacion':([0,61,182,184,227,246,],[3,140,140,222,140,3,]),'asignacion':([0,45,47,51,94,126,180,183,185,191,206,211,225,226,235,238,246,248,262,273,],[4,111,111,111,111,188,111,111,111,111,111,111,188,188,111,111,4,111,111,279,]),'impresion':([0,45,47,51,94,180,183,185,191,206,211,235,238,246,248,262,273,],[5,112,112,112,112,112,112,112,112,112,112,112,112,5,112,112,112,]),'impresion_vacia':([0,45,47,51,94,180,183,185,191,206,211,235,238,246,248,262,273,],[6,113,113,113,113,113,113,113,113,113,113,113,113,6,113,113,113,]),'expresiones_booleanas':([0,39,44,45,47,51,94,122,156,173,180,183,185,191,206,208,211,235,238,246,248,262,273,],[7,95,108,114,114,114,114,95,95,209,114,114,114,114,114,95,114,114,114,7,114,114,114,]),'solicitudDatosTeclado':([0,45,47,51,94,180,183,185,191,206,211,235,238,246,248,262,273,],[8,115,115,115,115,115,115,115,115,115,115,115,115,8,115,115,115,]),'hashes':([0,45,47,51,61,94,180,182,183,184,185,191,206,211,227,235,238,246,248,262,273,],[9,116,116,116,137,116,116,137,116,220,116,116,116,116,137,116,116,9,116,116,116,]),'estructura_if':([0,45,47,51,94,180,183,185,191,206,211,235,238,246,248,262,273,],[10,117,117,117,117,117,117,117,117,117,117,117,117,10,117,117,117,]),'funciones':([0,246,273,],[11,11,277,]),'funcionesEstructuras':([0,246,],[12,12,]),'array':([0,41,61,179,182,184,227,246,],[13,106,139,106,139,221,139,13,]),'each_array':([0,246,],[14,14,]),'comentarios':([0,246,],[15,15,]),'each_hash':([0,246,],[16,16,]),'sentencia_while':([0,45,47,51,94,180,183,185,191,206,211,235,238,246,248,262,273,],[17,119,119,119,119,214,119,119,119,119,119,119,119,17,119,119,119,]),'sentencia_case':([0,246,],[18,18,]),'sentencias_when':([0,46,246,],[19,124,19,]),'sentencia_until':([0,246,],[20,20,]),'definicion_clase':([0,246,],[21,21,]),'entero_a_flotante':([0,246,],[22,22,]),'expresionNumerica':([0,31,45,47,51,53,61,78,94,180,182,183,184,185,191,206,211,227,235,238,246,248,262,273,],[23,23,23,23,23,130,136,23,23,23,136,23,219,23,23,23,23,136,23,23,23,23,23,23,]),'concatenacionSimpleCadena':([0,61,182,184,227,246,],[24,24,24,24,24,24,]),'concatenacion_funcion':([0,61,182,184,227,246,],[25,25,25,25,25,25,]),'valor_print':([0,45,47,51,94,180,183,185,191,206,211,235,238,246,248,262,273,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'valorSimbolo':([0,39,44,45,47,51,85,94,122,156,173,180,183,185,191,206,208,211,235,238,246,248,262,273,],[33,33,33,33,33,33,161,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'valorNumerico':([0,29,31,39,44,45,47,51,53,61,62,78,86,94,122,154,156,170,171,173,180,182,183,184,185,191,206,208,211,227,235,238,246,248,262,273,],[34,73,82,96,96,34,34,34,82,82,145,82,163,34,96,73,96,202,205,96,34,82,34,82,34,34,34,96,34,82,34,34,34,34,34,34,]),'rangos':([0,39,44,45,47,51,94,122,156,173,180,183,185,191,206,208,211,235,238,246,248,262,273,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'sentencia_when':([0,46,109,246,],[46,46,181,46,]),'encabezadoClase':([0,246,],[48,48,]),'valorCadena':([0,60,61,127,182,184,196,227,246,],[49,132,49,190,49,49,232,49,49,]),'operadores':([23,130,136,219,],[53,53,53,53,]),'operadoresComparacion':([26,33,34,96,97,121,280,],[62,85,86,86,62,62,62,]),'valores':([29,154,],[70,198,]),'valor':([29,154,],[71,71,]),'soloEnteros':([31,98,159,],[80,80,200,]),'elemento_hash':([38,],[89,]),'claveValor':([38,169,],[91,201,]),'condicionIf':([39,122,156,208,],[94,183,199,235,]),'elementos_array':([41,179,],[100,213,]),'elemento_array':([41,179,],[102,102,]),'declaracion':([45,47,51,94,180,183,185,191,206,211,235,238,248,262,273,],[109,125,128,172,215,172,223,228,234,237,251,254,261,269,276,]),'asignacion_clase':([45,47,51,94,126,180,183,185,191,206,211,225,226,235,238,248,262,273,],[118,118,118,118,187,118,118,118,118,118,118,187,187,118,118,118,118,278,]),'estructura_ifUnaLinea':([45,47,51,71,94,180,183,185,191,206,211,235,238,248,262,273,],[120,120,120,155,120,120,120,120,120,120,120,120,120,120,120,120,]),'booleanos':([61,182,227,],[141,217,245,]),'funcionesArray':([63,],[146,]),'funcionesNumeros':([63,],[147,]),'funcionesFormatoImpresion':([88,],[166,]),'funcionesComparacion':([95,],[173,]),'cuerpoVariables':([126,225,226,273,],[186,243,244,274,]),'estructura_secundaria_if':([172,251,],[207,263,]),'argumentos':([177,236,265,],[212,252,270,]),'each_args_hash':([231,],[248,]),'cuerpo_each':([246,],[256,]),'vacio':([246,],[258,]),'cuerpoClase':([273,],[275,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> operacionAritmetica','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> input_concatenacion','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> impresion','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> impresion_vacia','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> expresiones_booleanas','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> solicitudDatosTeclado','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> hashes','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> estructura_if','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> funcionesEstructuras','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> array','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> each_array','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> comentarios','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> each_hash','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> sentencia_while','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> sentencia_case','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('cuerpo -> sentencias_when','cuerpo',1,'p_cuerpo','sintactico.py',30),
  ('cuerpo -> sentencia_until','cuerpo',1,'p_cuerpo','sintactico.py',31),
  ('cuerpo -> definicion_clase','cuerpo',1,'p_cuerpo','sintactico.py',32),
  ('cuerpo -> entero_a_flotante','cuerpo',1,'p_cuerpo','sintactico.py',33),
  ('valorSimbolo -> SIMBOLO','valorSimbolo',1,'p_valorSimbolo','sintactico.py',39),
  ('valorSimbolo -> VARIABLE','valorSimbolo',1,'p_valorSimbolo','sintactico.py',40),
  ('input_concatenacion -> concatenacionSimpleCadena','input_concatenacion',1,'p_input_concatenacion','sintactico.py',79),
  ('input_concatenacion -> concatenacion_funcion','input_concatenacion',1,'p_input_concatenacion','sintactico.py',80),
  ('concatenacion_funcion -> VARIABLE PUNTO CONCAT PARENTESIS_IZ valorCadena PARENTESIS_DER','concatenacion_funcion',6,'p_concatenacion_funcion','sintactico.py',86),
  ('valorCadena -> CADENA','valorCadena',1,'p_valorCadena','sintactico.py',99),
  ('valorCadena -> VARIABLE','valorCadena',1,'p_valorCadena','sintactico.py',100),
  ('concatenacionSimpleCadena -> valorCadena MAS valorCadena','concatenacionSimpleCadena',3,'p_concatenacionSimpleCadena','sintactico.py',134),
  ('concatenacionSimpleCadena -> concatenacionSimpleCadena MAS valorCadena','concatenacionSimpleCadena',3,'p_concatenacionSimpleCadena','sintactico.py',135),
  ('valorNumerico -> FLOTANTE','valorNumerico',1,'p_valorNumerico','sintactico.py',154),
  ('valorNumerico -> ENTERO','valorNumerico',1,'p_valorNumerico','sintactico.py',155),
  ('soloEnteros -> ENTERO','soloEnteros',1,'p_soloEnteros','sintactico.py',167),
  ('entero_a_flotante -> VARIABLE PUNTO TO_F','entero_a_flotante',3,'p_entero_a_flotante','sintactico.py',172),
  ('operadores -> MAS','operadores',1,'p_operadores','sintactico.py',189),
  ('operadores -> MENOS','operadores',1,'p_operadores','sintactico.py',190),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',191),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',192),
  ('operadores -> EXPONENCIACION','operadores',1,'p_operadores','sintactico.py',193),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',194),
  ('expresionNumerica -> valorNumerico','expresionNumerica',1,'p_expresionNumerica','sintactico.py',199),
  ('expresionNumerica -> operacionAritmetica','expresionNumerica',1,'p_expresionNumerica','sintactico.py',200),
  ('expresionNumerica -> PARENTESIS_IZ operacionAritmetica PARENTESIS_DER','expresionNumerica',3,'p_expresionNumerica','sintactico.py',201),
  ('expresionNumerica -> VARIABLE','expresionNumerica',1,'p_expresionNumerica','sintactico.py',202),
  ('operacionAritmetica -> expresionNumerica operadores expresionNumerica','operacionAritmetica',3,'p_operacionAritmetica','sintactico.py',216),
  ('valor_print -> PRINT','valor_print',1,'p_valor_print','sintactico.py',255),
  ('valor_print -> PUTS','valor_print',1,'p_valor_print','sintactico.py',256),
  ('valores -> valor','valores',1,'p_valores','sintactico.py',261),
  ('valores -> valor COMA valores','valores',3,'p_valores','sintactico.py',262),
  ('valores -> valor estructura_ifUnaLinea','valores',2,'p_valores','sintactico.py',263),
  ('booleanos -> TRUE','booleanos',1,'p_booleanos','sintactico.py',267),
  ('booleanos -> FALSE','booleanos',1,'p_booleanos','sintactico.py',268),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',275),
  ('valor -> valorNumerico','valor',1,'p_valor','sintactico.py',276),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',277),
  ('valor -> VARIABLECLASE','valor',1,'p_valor','sintactico.py',278),
  ('valor -> SIMBOLO','valor',1,'p_valor','sintactico.py',279),
  ('impresion -> valor_print valores','impresion',2,'p_impresion','sintactico.py',298),
  ('asignacion_clase -> VARIABLECLASE IGUAL CADENA','asignacion_clase',3,'p_asignacion_clase','sintactico.py',301),
  ('asignacion_clase -> VARIABLECLASE IGUAL expresionNumerica','asignacion_clase',3,'p_asignacion_clase','sintactico.py',302),
  ('asignacion_clase -> VARIABLECLASE IGUAL hashes','asignacion_clase',3,'p_asignacion_clase','sintactico.py',303),
  ('asignacion_clase -> VARIABLECLASE IGUAL array','asignacion_clase',3,'p_asignacion_clase','sintactico.py',304),
  ('asignacion_clase -> VARIABLECLASE IGUAL input_concatenacion','asignacion_clase',3,'p_asignacion_clase','sintactico.py',305),
  ('asignacion_clase -> VARIABLE IGUAL booleanos','asignacion_clase',3,'p_asignacion_clase','sintactico.py',306),
  ('asignacion -> VARIABLE IGUAL CADENA','asignacion',3,'p_asignacion','sintactico.py',311),
  ('asignacion -> VARIABLE IGUAL expresionNumerica','asignacion',3,'p_asignacion','sintactico.py',312),
  ('asignacion -> VARIABLE IGUAL hashes','asignacion',3,'p_asignacion','sintactico.py',313),
  ('asignacion -> VARIABLE IGUAL SIMBOLO','asignacion',3,'p_asignacion','sintactico.py',314),
  ('asignacion -> VARIABLE IGUAL array','asignacion',3,'p_asignacion','sintactico.py',315),
  ('asignacion -> VARIABLE IGUAL input_concatenacion','asignacion',3,'p_asignacion','sintactico.py',316),
  ('asignacion -> VARIABLE IGUAL booleanos','asignacion',3,'p_asignacion','sintactico.py',317),
  ('elementos_array -> elemento_array COMA elementos_array','elementos_array',3,'p_elementos_array','sintactico.py',327),
  ('elementos_array -> elemento_array','elementos_array',1,'p_elementos_array','sintactico.py',328),
  ('elemento_array -> CADENA','elemento_array',1,'p_elemento_array','sintactico.py',336),
  ('elemento_array -> ENTERO','elemento_array',1,'p_elemento_array','sintactico.py',337),
  ('elemento_array -> FLOTANTE','elemento_array',1,'p_elemento_array','sintactico.py',338),
  ('elemento_array -> array','elemento_array',1,'p_elemento_array','sintactico.py',339),
  ('elemento_array -> VARIABLE','elemento_array',1,'p_elemento_array','sintactico.py',340),
  ('array -> CORCHETE_IZ elementos_array CORCHETE_DER','array',3,'p_array','sintactico.py',348),
  ('array -> CORCHETE_IZ CORCHETE_DER','array',2,'p_array','sintactico.py',349),
  ('each_array -> VARIABLE PUNTO DO BARRA VARIABLE BARRA cuerpo_each END','each_array',8,'p_each_array','sintactico.py',358),
  ('cuerpo_each -> cuerpo','cuerpo_each',1,'p_cuerpo_each','sintactico.py',362),
  ('cuerpo_each -> vacio','cuerpo_each',1,'p_cuerpo_each','sintactico.py',363),
  ('vacio -> <empty>','vacio',0,'p_vacio','sintactico.py',367),
  ('rangos -> PARENTESIS_IZ soloEnteros TRES_PUNTOS soloEnteros PARENTESIS_DER','rangos',5,'p_rangos','sintactico.py',373),
  ('comentarios -> COMENTARIO','comentarios',1,'p_comentarios','sintactico.py',378),
  ('comentarios -> COMENTARIO_MULTI','comentarios',1,'p_comentarios','sintactico.py',379),
  ('impresion_vacia -> PRINT PARENTESIS_IZ PARENTESIS_DER','impresion_vacia',3,'p_impresion_vacia','sintactico.py',383),
  ('impresion_vacia -> PUTS PARENTESIS_IZ PARENTESIS_DER','impresion_vacia',3,'p_impresion_vacia','sintactico.py',384),
  ('impresion_vacia -> PUTS','impresion_vacia',1,'p_impresion_vacia','sintactico.py',385),
  ('operadoresComparacion -> IGUAL_DOBLEP','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',390),
  ('operadoresComparacion -> DIFERENTE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',391),
  ('operadoresComparacion -> MAYOR_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',392),
  ('operadoresComparacion -> MENOR_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',393),
  ('operadoresComparacion -> MENOR_IGUAL_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',394),
  ('operadoresComparacion -> MAYOR_IGUAL_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',395),
  ('funcionesComparacion -> AND','funcionesComparacion',1,'p_funcionesComparacion','sintactico.py',399),
  ('funcionesComparacion -> OR','funcionesComparacion',1,'p_funcionesComparacion','sintactico.py',400),
  ('expresiones_booleanas -> valorSimbolo operadoresComparacion valorSimbolo','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',404),
  ('expresiones_booleanas -> valorNumerico operadoresComparacion valorNumerico','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',405),
  ('expresiones_booleanas -> rangos TRIPLE_IGUAL ENTERO','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',406),
  ('expresiones_booleanas -> VARIABLE operadoresComparacion VARIABLE','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',407),
  ('expresiones_booleanas -> VARIABLE operadoresComparacion valorNumerico','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',408),
  ('expresiones_booleanas -> valorNumerico operadoresComparacion VARIABLE','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',409),
  ('solicitudDatosTeclado -> GETS','solicitudDatosTeclado',1,'p_solicitudDatosTeclado','sintactico.py',554),
  ('solicitudDatosTeclado -> GETS PUNTO funcionesFormatoImpresion','solicitudDatosTeclado',3,'p_solicitudDatosTeclado','sintactico.py',555),
  ('funciones -> DEF VARIABLE PARENTESIS_IZ PARENTESIS_DER declaracion END','funciones',6,'p_funciones','sintactico.py',558),
  ('funciones -> DEF VARIABLE PARENTESIS_IZ argumentos PARENTESIS_DER declaracion END','funciones',7,'p_funciones','sintactico.py',559),
  ('funcionesArray -> SORT','funcionesArray',1,'p_funcionesArray','sintactico.py',563),
  ('funcionesArray -> FOR EACH','funcionesArray',2,'p_funcionesArray','sintactico.py',564),
  ('funcionesFormatoImpresion -> CHOMP','funcionesFormatoImpresion',1,'p_funcionesFormatoImpresion','sintactico.py',568),
  ('funcionesNumeros -> TO_F','funcionesNumeros',1,'p_funcionesNumeros','sintactico.py',572),
  ('funcionesEstructuras -> VARIABLE PUNTO funcionesArray','funcionesEstructuras',3,'p_funcionesEstructuras','sintactico.py',576),
  ('funcionesEstructuras -> VARIABLE PUNTO funcionesNumeros','funcionesEstructuras',3,'p_funcionesEstructuras','sintactico.py',577),
  ('argumentos -> VARIABLE','argumentos',1,'p_argumentos','sintactico.py',597),
  ('argumentos -> VARIABLE COMA argumentos','argumentos',3,'p_argumentos','sintactico.py',598),
  ('condicionIf -> expresiones_booleanas','condicionIf',1,'p_condicionIf','sintactico.py',603),
  ('condicionIf -> expresiones_booleanas funcionesComparacion expresiones_booleanas','condicionIf',3,'p_condicionIf','sintactico.py',604),
  ('estructura_if -> IF condicionIf declaracion ELSE declaracion END','estructura_if',6,'p_estructura_if','sintactico.py',608),
  ('estructura_if -> IF condicionIf declaracion estructura_secundaria_if','estructura_if',4,'p_estructura_if','sintactico.py',609),
  ('estructura_ifUnaLinea -> IF condicionIf','estructura_ifUnaLinea',2,'p_estructura_ifUnaLinea','sintactico.py',613),
  ('estructura_secundaria_if -> ELSEIF condicionIf declaracion ELSE declaracion END','estructura_secundaria_if',6,'p_estructura_secundaria_if','sintactico.py',617),
  ('estructura_secundaria_if -> ELSEIF condicionIf declaracion estructura_secundaria_if','estructura_secundaria_if',4,'p_estructura_secundaria_if','sintactico.py',618),
  ('declaracion -> operacionAritmetica','declaracion',1,'p_declaracion','sintactico.py',622),
  ('declaracion -> asignacion','declaracion',1,'p_declaracion','sintactico.py',623),
  ('declaracion -> impresion','declaracion',1,'p_declaracion','sintactico.py',624),
  ('declaracion -> impresion_vacia','declaracion',1,'p_declaracion','sintactico.py',625),
  ('declaracion -> expresiones_booleanas','declaracion',1,'p_declaracion','sintactico.py',626),
  ('declaracion -> solicitudDatosTeclado','declaracion',1,'p_declaracion','sintactico.py',627),
  ('declaracion -> hashes','declaracion',1,'p_declaracion','sintactico.py',628),
  ('declaracion -> estructura_if','declaracion',1,'p_declaracion','sintactico.py',629),
  ('declaracion -> asignacion_clase','declaracion',1,'p_declaracion','sintactico.py',630),
  ('declaracion -> sentencia_while','declaracion',1,'p_declaracion','sintactico.py',631),
  ('declaracion -> estructura_ifUnaLinea','declaracion',1,'p_declaracion','sintactico.py',632),
  ('sentencia_while -> WHILE expresiones_booleanas DO sentencia_while END','sentencia_while',5,'p_sentencia_while','sintactico.py',636),
  ('sentencia_while -> WHILE expresiones_booleanas DO declaracion END','sentencia_while',5,'p_sentencia_while','sintactico.py',637),
  ('sentencia_case -> CASE declaracion sentencia_when END','sentencia_case',4,'p_sentencia_case','sintactico.py',641),
  ('sentencias_when -> sentencia_when','sentencias_when',1,'p_sentencias_when','sintactico.py',645),
  ('sentencias_when -> sentencia_when sentencias_when','sentencias_when',2,'p_sentencias_when','sintactico.py',646),
  ('sentencia_when -> WHEN declaracion IGUAL_DOBLEP declaracion','sentencia_when',4,'p_sentencia_when','sintactico.py',650),
  ('sentencia_until -> UNTIL declaracion DO declaracion END','sentencia_until',5,'p_sentencia_until','sintactico.py',654),
  ('hashes -> LLAVE_IZ elemento_hash LLAVE_DER','hashes',3,'p_hashes','sintactico.py',659),
  ('hashes -> LLAVE_IZ LLAVE_DER','hashes',2,'p_hashes','sintactico.py',660),
  ('claveValor -> VARIABLE ASIGNA_HASH valorNumerico','claveValor',3,'p_claveValor','sintactico.py',664),
  ('claveValor -> VARIABLE ASIGNA_HASH CADENA','claveValor',3,'p_claveValor','sintactico.py',665),
  ('claveValor -> CADENA ASIGNA_HASH valorNumerico','claveValor',3,'p_claveValor','sintactico.py',666),
  ('claveValor -> CADENA ASIGNA_HASH CADENA','claveValor',3,'p_claveValor','sintactico.py',667),
  ('elemento_hash -> claveValor','elemento_hash',1,'p_elemento_hash','sintactico.py',671),
  ('elemento_hash -> claveValor COMA claveValor','elemento_hash',3,'p_elemento_hash','sintactico.py',672),
  ('each_hash -> VARIABLE PUNTO EACH DO BARRA each_args_hash declaracion END','each_hash',8,'p_each_hash','sintactico.py',676),
  ('each_args_hash -> VARIABLE COMA VARIABLE BARRA','each_args_hash',4,'p_each_args_hash','sintactico.py',680),
  ('each_args_hash -> VARIABLE BARRA','each_args_hash',2,'p_each_args_hash','sintactico.py',681),
  ('encabezadoClase -> CLASS ID_CLASE','encabezadoClase',2,'p_encabezadoClase','sintactico.py',684),
  ('encabezadoClase -> CLASS ID_CLASE MENOR_QUE ID_CLASE','encabezadoClase',4,'p_encabezadoClase','sintactico.py',685),
  ('definicion_clase -> encabezadoClase NEWLINE cuerpoVariables NEWLINE DEF INITIALIZE PARENTESIS_IZ argumentos PARENTESIS_DER cuerpoClase END','definicion_clase',11,'p_definicion_clase','sintactico.py',688),
  ('cuerpoVariables -> asignacion_clase','cuerpoVariables',1,'p_cuerpoVariables','sintactico.py',692),
  ('cuerpoVariables -> asignacion','cuerpoVariables',1,'p_cuerpoVariables','sintactico.py',693),
  ('cuerpoVariables -> asignacion_clase NEWLINE cuerpoVariables','cuerpoVariables',3,'p_cuerpoVariables','sintactico.py',694),
  ('cuerpoVariables -> asignacion NEWLINE cuerpoVariables','cuerpoVariables',3,'p_cuerpoVariables','sintactico.py',695),
  ('cuerpoClase -> cuerpoVariables','cuerpoClase',1,'p_cuerpoClase','sintactico.py',699),
  ('cuerpoClase -> declaracion','cuerpoClase',1,'p_cuerpoClase','sintactico.py',700),
  ('cuerpoClase -> funciones','cuerpoClase',1,'p_cuerpoClase','sintactico.py',701),
]
