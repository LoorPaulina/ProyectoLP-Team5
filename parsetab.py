
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALIAS AND ASIGNA_HASH BARRA BEGIN BREAK CADENA CASE CHOMP CLASS COMA COMENTARIO COMENTARIO_MULTI COMILLA_D COMILLA_S CONCAT CORCHETE_DER CORCHETE_IZ DEF DEFINED_QUESTION DIFERENTE DIVISION DO DOBLE_IGUAL EACH ELSE ELSEIF END ENSURE ENTERO EXCLAMACION_ALTO EXCLAMACION_BAJO EXPONENCIACION FALSE FLOTANTE FOR GETS ID_CLASE IF IGUAL IGUAL_DOBLEP IN INITIALIZE LLAVE_DER LLAVE_IZ MAS MAYOR_IGUAL_QUE MAYOR_QUE MENOR_IGUAL_QUE MENOR_QUE MENOS MODULE MODULO MULTIPLICACION NEWLINE NEXT NIL NOT OR O_SIGNO PARENTESIS_DER PARENTESIS_IZ PORCENTAJE PREGUNTA PRINT PRINTF PUNTO PUTS RAISE REDO RESCUE RETRY RETURN SELF SIMBOLO SORT SUPER TO_F TRES_PUNTOS TRIPLE_IGUAL TRUE UNTIL VARIABLE VARIABLECLASE WHEN WHILE YIELD Y_SIGNOcuerpo : operacionAritmetica\n              | comparacion_simbolo\n              | input_concatenacion\n              | asignacion\n              | impresion\n              | impresion_vacia\n              | expresiones_booleanas\n              | solicitudDatosTeclado\n              | hashes\n              | estructura_if\n              | funciones\n              | funcionesEstructuras\n              | array\n              | each_array\n              | comentarios\n              | each_hash\n              | sentencia_while\n              | sentencia_case\n              | sentencias_when\n              | sentencia_until\n              | definicion_clase\n              | entero_a_flotantevalorSimbolo : SIMBOLO \n                    | VARIABLE comparacion_simbolo : valorSimbolo IGUAL_DOBLEP valorSimbolo \n                            | valorSimbolo DIFERENTE valorSimbolo  input_concatenacion : concatenacionSimpleCadena\n                            | concatenacion_funcion  concatenacion_funcion : VARIABLE PUNTO CONCAT PARENTESIS_IZ valorCadena PARENTESIS_DER  valorCadena : CADENA\n                    | VARIABLE concatenacionSimpleCadena : valorCadena MAS valorCadena\n                                 | concatenacionSimpleCadena MAS valorCadenavalorNumerico : FLOTANTE \n                     | ENTEROsoloEnteros : ENTEROentero_a_flotante : VARIABLE PUNTO TO_Foperadores : MAS \n                  | MENOS\n                  | DIVISION\n                  | MULTIPLICACION\n                  | EXPONENCIACION \n                  | MODULOexpresionNumerica : valorNumerico\n                         | operacionAritmetica\n                         | PARENTESIS_IZ operacionAritmetica PARENTESIS_DERoperacionAritmetica : expresionNumerica operadores expresionNumericavalor_print : PRINT\n                   | PUTS valores : valor\n               | valor COMA valores\n               | valor estructura_ifUnaLineabooleanos : TRUE\n                | FALSEvalor : CADENA\n             | valorNumerico\n             | VARIABLE\n             | VARIABLECLASE\n             | SIMBOLOimpresion : valor_print valoresasignacion_clase : VARIABLECLASE IGUAL CADENA\n                  | VARIABLECLASE IGUAL expresionNumerica\n                  | VARIABLECLASE IGUAL hashes\n                  | VARIABLECLASE IGUAL array\n                  | VARIABLECLASE IGUAL input_concatenacion\n                  | VARIABLE IGUAL booleanosasignacion : VARIABLE IGUAL CADENA\n                  | VARIABLE IGUAL expresionNumerica\n                  | VARIABLE IGUAL hashes\n                  | VARIABLE IGUAL SIMBOLO\n                  | VARIABLE IGUAL array\n                  | VARIABLE IGUAL input_concatenacion\n                  | VARIABLE IGUAL booleanoselementos_array : elemento_array COMA elementos_array\n                       | elemento_array elemento_array : CADENA\n                      | ENTERO\n                      | FLOTANTE\n                      | array\n                      | VARIABLEarray : CORCHETE_IZ elementos_array CORCHETE_DER\n             | CORCHETE_IZ CORCHETE_DEReach_array : VARIABLE PUNTO DO BARRA VARIABLE BARRA cuerpo_each ENDcuerpo_each : cuerpo\n                   | vaciovacio :  rangos : PARENTESIS_IZ soloEnteros TRES_PUNTOS soloEnteros PARENTESIS_DERcomentarios : COMENTARIO \n                    | COMENTARIO_MULTIimpresion_vacia : PRINT PARENTESIS_IZ PARENTESIS_DER\n                        | PUTS PARENTESIS_IZ PARENTESIS_DER\n                        | PUTSoperadoresComparacion : IGUAL_DOBLEP\n                             | DIFERENTE\n                             | MAYOR_QUE\n                             | MENOR_QUE\n                             | MENOR_IGUAL_QUE\n                             | MAYOR_IGUAL_QUEfuncionesComparacion : AND\n                            | ORexpresiones_booleanas : valorNumerico operadoresComparacion valorNumerico\n                             | rangos TRIPLE_IGUAL ENTERO\n                             | VARIABLE operadoresComparacion VARIABLE\n                             | VARIABLE operadoresComparacion valorNumerico\n                             | valorNumerico operadoresComparacion VARIABLEsolicitudDatosTeclado : GETS \n                            | GETS PUNTO funcionesFormatoImpresion funciones : DEF VARIABLE PARENTESIS_IZ PARENTESIS_DER declaracion END\n                 | DEF VARIABLE PARENTESIS_IZ argumentos PARENTESIS_DER declaracion ENDfuncionesArray : SORT\n                      | FOR EACHfuncionesFormatoImpresion : CHOMPfuncionesNumeros : TO_FfuncionesEstructuras : VARIABLE PUNTO funcionesArray\n                            | VARIABLE PUNTO funcionesNumerosargumentos : VARIABLE\n                    | VARIABLE COMA argumentoscondicionIf : expresiones_booleanas\n                | expresiones_booleanas funcionesComparacion expresiones_booleanasestructura_if : IF condicionIf declaracion ELSE declaracion END\n                    | IF condicionIf declaracion estructura_secundaria_ifestructura_ifUnaLinea : IF condicionIfestructura_secundaria_if : ELSEIF condicionIf declaracion ELSE declaracion END\n                                | ELSEIF condicionIf declaracion estructura_secundaria_ifdeclaracion : operacionAritmetica\n                    | asignacion\n                    | impresion\n                    | impresion_vacia\n                    | expresiones_booleanas\n                    | solicitudDatosTeclado\n                    | hashes\n                    | estructura_if\n                    | asignacion_clase\n                    | sentencia_while\n                    | estructura_ifUnaLineasentencia_while : WHILE expresiones_booleanas DO sentencia_while END\n                      | WHILE expresiones_booleanas DO declaracion END sentencia_case : CASE declaracion sentencia_when ENDsentencias_when : sentencia_when\n                    | sentencia_when sentencias_whensentencia_when : WHEN declaracion IGUAL_DOBLEP declaracionsentencia_until : UNTIL declaracion DO declaracion ENDhashes : LLAVE_IZ elemento_hash LLAVE_DER\n              | LLAVE_IZ LLAVE_DERclaveValor : VARIABLE ASIGNA_HASH valorNumerico\n                  | VARIABLE ASIGNA_HASH CADENA\n                  | CADENA ASIGNA_HASH valorNumerico\n                  | CADENA ASIGNA_HASH CADENAelemento_hash : claveValor\n                     | claveValor COMA claveValoreach_hash : VARIABLE PUNTO EACH DO BARRA each_args_hash declaracion ENDeach_args_hash : VARIABLE COMA VARIABLE BARRA\n                      | VARIABLE BARRAdefinicion_clase : CLASS ID_CLASE NEWLINE cuerpoVariables NEWLINE DEF INITIALIZE PARENTESIS_IZ argumentos PARENTESIS_DER cuerpoClase ENDcuerpoVariables : asignacion_clase                \n                | asignacion\n                | asignacion_clase NEWLINE cuerpoVariables\n                | asignacion NEWLINE cuerpoVariablescuerpoClase : cuerpoVariables\n                | declaracion\n                | funciones'
    
_lr_action_items = {'VARIABLE':([0,31,32,34,37,39,40,41,42,45,46,48,51,52,60,61,62,63,64,66,67,68,69,70,71,86,94,95,122,127,146,147,156,158,163,164,165,169,173,174,175,177,179,180,182,183,184,185,186,188,190,192,202,204,205,207,226,230,231,233,238,239,240,241,243,257,258,260,268,269,272,],[28,76,-48,-49,-35,92,97,99,107,97,121,121,-34,121,132,132,135,136,146,-93,-94,-95,-96,-97,-98,164,121,-118,97,135,-103,-104,76,97,-101,-105,-102,92,97,-99,-100,206,107,121,136,121,136,121,223,121,225,135,121,97,-119,121,242,121,206,121,223,223,136,28,121,265,-153,121,206,-152,279,]),'PRINT':([0,37,46,48,51,52,94,95,146,147,163,164,165,180,183,185,188,202,205,207,230,233,241,243,258,260,269,272,],[32,-35,32,32,-34,32,32,-118,-103,-104,-101,-105,-102,32,32,32,32,32,-119,32,32,32,32,32,-153,32,-152,32,]),'PUTS':([0,37,46,48,51,52,94,95,146,147,163,164,165,180,183,185,188,202,205,207,230,233,241,243,258,260,269,272,],[34,-35,34,34,-34,34,34,-118,-103,-104,-101,-105,-102,34,34,34,34,34,-119,34,34,34,34,34,-153,34,-152,34,]),'GETS':([0,37,46,48,51,52,94,95,146,147,163,164,165,180,183,185,188,202,205,207,230,233,241,243,258,260,269,272,],[38,-35,38,38,-34,38,38,-118,-103,-104,-101,-105,-102,38,38,38,38,38,-119,38,38,38,38,38,-153,38,-152,38,]),'LLAVE_IZ':([0,37,46,48,51,52,63,94,95,146,147,163,164,165,180,182,183,184,185,188,202,205,207,230,233,240,241,243,258,260,269,272,],[39,-35,39,39,-34,39,39,39,-118,-103,-104,-101,-105,-102,39,39,39,39,39,39,39,-119,39,39,39,39,39,39,-153,39,-152,39,]),'IF':([0,37,46,48,51,52,73,74,75,76,77,78,94,95,146,147,163,164,165,180,183,185,188,202,205,207,230,233,241,243,258,260,269,272,],[40,-35,122,122,-34,122,158,-55,-56,-57,-58,-59,122,-118,-103,-104,-101,-105,-102,122,122,122,122,122,-119,122,122,122,40,122,-153,122,-152,122,]),'DEF':([0,237,241,272,],[41,250,41,41,]),'CORCHETE_IZ':([0,42,63,179,182,184,240,241,],[42,42,42,42,42,42,42,42,]),'COMENTARIO':([0,241,],[43,43,]),'COMENTARIO_MULTI':([0,241,],[44,44,]),'WHILE':([0,37,46,48,51,52,94,95,146,147,163,164,165,180,183,185,188,202,205,207,230,233,241,243,258,260,269,272,],[45,-35,45,45,-34,45,45,-118,-103,-104,-101,-105,-102,45,45,45,45,45,-119,45,45,45,45,45,-153,45,-152,45,]),'CASE':([0,241,],[46,46,]),'UNTIL':([0,241,],[48,48,]),'CLASS':([0,241,],[49,49,]),'PARENTESIS_IZ':([0,32,33,34,37,40,45,46,48,51,52,53,54,55,56,57,58,59,63,80,94,95,99,122,146,147,153,158,163,164,165,173,174,175,180,182,183,184,185,188,202,204,205,207,230,233,240,241,243,258,260,263,269,272,],[33,79,80,85,-35,98,98,33,33,-34,33,80,-38,-39,-40,-41,-42,-43,80,80,33,-118,177,98,-103,-104,192,98,-101,-105,-102,98,-99,-100,33,80,33,80,33,33,33,98,-119,33,33,33,80,33,33,-153,33,268,-152,33,]),'SIMBOLO':([0,31,32,34,60,61,63,156,182,240,241,],[30,78,-48,-49,30,30,140,78,140,140,30,]),'FLOTANTE':([0,31,32,33,34,37,40,42,45,46,48,51,52,53,54,55,56,57,58,59,63,64,66,67,68,69,70,71,80,86,94,95,122,146,147,156,158,163,164,165,170,171,173,174,175,179,180,182,183,184,185,188,202,204,205,207,230,233,240,241,243,258,260,269,272,],[51,51,-48,51,-49,-35,51,105,51,51,51,-34,51,51,-38,-39,-40,-41,-42,-43,51,51,-93,-94,-95,-96,-97,-98,51,51,51,-118,51,-103,-104,51,51,-101,-105,-102,51,51,51,-99,-100,105,51,51,51,51,51,51,51,51,-119,51,51,51,51,51,51,-153,51,-152,51,]),'ENTERO':([0,31,32,33,34,37,40,42,45,46,48,51,52,53,54,55,56,57,58,59,63,64,66,67,68,69,70,71,80,86,87,94,95,98,122,146,147,156,158,161,163,164,165,170,171,173,174,175,179,180,182,183,184,185,188,202,204,205,207,230,233,240,241,243,258,260,269,272,],[37,37,-48,83,-49,-35,37,104,37,37,37,-34,37,37,-38,-39,-40,-41,-42,-43,37,37,-93,-94,-95,-96,-97,-98,37,37,165,37,-118,176,37,-103,-104,37,37,176,-101,-105,-102,37,37,37,-99,-100,104,37,37,37,37,37,37,37,37,-119,37,37,37,37,37,37,-153,37,-152,37,]),'WHEN':([0,26,27,29,34,37,38,47,51,72,73,74,75,76,77,78,84,90,95,101,109,110,111,112,113,114,115,116,117,118,119,120,129,130,134,135,137,138,139,140,141,142,144,145,146,147,157,159,160,162,163,164,165,166,167,168,178,183,187,194,195,203,205,213,214,215,216,217,218,224,234,235,241,244,245,261,270,],[52,-27,-28,-30,-92,-35,-106,52,-34,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,-82,52,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-47,-45,-33,-31,-67,-68,-69,-70,-71,-72,-53,-54,-103,-104,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,-81,-122,-32,-51,-122,-121,-119,-66,-61,-62,-63,-64,-65,-141,-136,-137,52,-29,-120,-124,-123,]),'CADENA':([0,31,32,34,39,42,62,63,127,156,169,170,171,179,182,184,192,240,241,],[29,74,-48,-49,93,103,29,137,29,74,93,199,200,103,137,214,29,137,29,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,29,30,34,37,38,43,44,47,51,72,73,74,75,76,77,78,84,90,95,101,110,111,112,113,114,115,116,117,118,119,120,124,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,152,154,157,159,160,162,163,164,165,166,167,168,178,183,187,193,194,195,203,205,212,213,214,215,216,217,218,224,234,235,236,244,245,248,261,262,264,266,270,280,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-27,-28,-30,-23,-92,-35,-106,-88,-89,-139,-34,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,-82,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-140,-47,-45,-25,-24,-26,-33,-31,-67,-68,-69,-70,-71,-72,-73,-53,-54,-103,-104,-114,-115,-37,-110,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,-81,-122,-32,-111,-51,-122,-121,-119,-138,-66,-61,-62,-63,-64,-65,-141,-136,-137,-142,-29,-120,-108,-124,-109,-83,-151,-123,-154,]),'END':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,29,30,34,37,38,43,44,47,51,72,73,74,75,76,77,78,84,90,95,101,110,111,112,113,114,115,116,117,118,119,120,124,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,152,154,157,159,160,162,163,164,165,166,167,168,178,181,183,187,193,194,195,203,205,210,211,212,213,214,215,216,217,218,219,221,222,224,229,232,234,235,236,241,244,245,248,249,251,252,253,254,255,256,259,261,262,264,266,267,270,273,274,275,276,277,278,280,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-27,-28,-30,-23,-92,-35,-106,-88,-89,-139,-34,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,-82,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-140,-47,-45,-25,-24,-26,-33,-31,-67,-68,-69,-70,-71,-72,-73,-53,-54,-103,-104,-114,-115,-37,-110,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,-81,212,-122,-32,-111,-51,-122,-121,-119,234,235,-138,-66,-61,-62,-63,-64,-65,236,-155,-156,-141,245,248,-136,-137,-142,-86,-29,-120,-108,262,-157,-158,-66,264,-84,-85,266,-124,-109,-83,-151,270,-123,-159,280,-160,-161,-133,-126,-154,]),'MAS':([2,24,26,28,29,35,37,50,51,81,83,84,110,129,130,134,135,136,137,138,160,187,214,215,],[-45,54,62,-31,-30,-44,-35,127,-34,-45,-35,-44,-45,54,-45,-33,-31,-31,-30,54,-46,-32,-30,54,]),'MENOS':([2,24,35,37,51,81,83,84,110,129,130,138,160,215,],[-45,55,-44,-35,-34,-45,-35,-44,-45,55,-45,55,-46,55,]),'DIVISION':([2,24,35,37,51,81,83,84,110,129,130,138,160,215,],[-45,56,-44,-35,-34,-45,-35,-44,-45,56,-45,56,-46,56,]),'MULTIPLICACION':([2,24,35,37,51,81,83,84,110,129,130,138,160,215,],[-45,57,-44,-35,-34,-45,-35,-44,-45,57,-45,57,-46,57,]),'EXPONENCIACION':([2,24,35,37,51,81,83,84,110,129,130,138,160,215,],[-45,58,-44,-35,-34,-45,-35,-44,-45,58,-45,58,-46,58,]),'MODULO':([2,24,35,37,51,81,83,84,110,129,130,138,160,215,],[-45,59,-44,-35,-34,-45,-35,-44,-45,59,-45,59,-46,59,]),'IGUAL_DOBLEP':([25,26,27,28,29,30,34,35,37,38,51,72,73,74,75,76,77,78,84,90,95,96,97,101,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,134,135,137,138,139,140,141,142,144,145,146,147,157,159,160,162,163,164,165,166,167,168,178,183,187,194,195,203,205,213,214,215,216,217,218,234,235,244,245,261,270,279,],[60,-27,-28,66,-30,-23,-92,66,-35,-106,-34,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,66,66,-82,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,66,188,-47,-45,-33,-31,-67,-68,-69,-70,-71,-72,-53,-54,-103,-104,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,-81,-122,-32,-51,-122,-121,-119,-66,-61,-62,-63,-64,-65,-136,-137,-29,-120,-124,-123,66,]),'DIFERENTE':([25,28,30,35,37,51,96,97,121,279,],[61,67,-23,67,-35,-34,67,67,67,67,]),'DO':([26,27,29,34,37,38,51,65,72,73,74,75,76,77,78,84,90,95,101,108,110,111,112,113,114,115,116,117,118,119,120,125,129,130,134,135,137,138,139,140,141,142,144,145,146,147,151,157,159,160,162,163,164,165,166,167,168,178,183,187,194,195,203,205,213,214,215,216,217,218,234,235,244,245,261,270,],[-27,-28,-30,-92,-35,-106,-34,150,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,-82,180,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,185,-47,-45,-33,-31,-67,-68,-69,-70,-71,-72,-53,-54,-103,-104,191,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,-81,-122,-32,-51,-122,-121,-119,-66,-61,-62,-63,-64,-65,-136,-137,-29,-120,-124,-123,]),'ELSE':([26,27,29,34,37,38,51,72,73,74,75,76,77,78,84,90,95,101,110,111,112,113,114,115,116,117,118,119,120,129,130,134,135,137,138,139,140,141,142,144,145,146,147,157,159,160,162,163,164,165,166,167,168,172,178,183,187,194,195,203,205,213,214,215,216,217,218,234,235,244,245,246,261,270,],[-27,-28,-30,-92,-35,-106,-34,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,-82,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-47,-45,-33,-31,-67,-68,-69,-70,-71,-72,-53,-54,-103,-104,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,202,-81,-122,-32,-51,-122,-121,-119,-66,-61,-62,-63,-64,-65,-136,-137,-29,-120,260,-124,-123,]),'ELSEIF':([26,27,29,34,37,38,51,72,73,74,75,76,77,78,84,90,95,101,110,111,112,113,114,115,116,117,118,119,120,129,130,134,135,137,138,139,140,141,142,144,145,146,147,157,159,160,162,163,164,165,166,167,168,172,178,183,187,194,195,203,205,213,214,215,216,217,218,234,235,244,245,246,261,270,],[-27,-28,-30,-92,-35,-106,-34,-60,-50,-55,-56,-57,-58,-59,-44,-144,-118,-82,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-47,-45,-33,-31,-67,-68,-69,-70,-71,-72,-53,-54,-103,-104,-52,-90,-46,-91,-101,-105,-102,-107,-112,-143,204,-81,-122,-32,-51,-122,-121,-119,-66,-61,-62,-63,-64,-65,-136,-137,-29,-120,204,-124,-123,]),'NEWLINE':([26,27,29,37,51,84,90,101,126,129,130,134,135,137,138,139,140,141,142,144,145,160,168,178,187,214,215,216,217,218,220,221,222,244,251,252,253,277,278,],[-27,-28,-30,-35,-34,-44,-144,-82,186,-47,-45,-33,-31,-67,-68,-69,-70,-71,-72,-53,-54,-46,-143,-81,-32,-61,-62,-63,-64,-65,237,238,239,-29,-157,-158,-66,238,239,]),'IGUAL':([28,121,123,223,279,],[63,182,184,240,240,]),'PUNTO':([28,38,136,],[65,88,189,]),'MAYOR_QUE':([28,35,37,51,96,97,121,279,],[68,68,-35,-34,68,68,68,68,]),'MENOR_QUE':([28,35,37,51,96,97,121,279,],[69,69,-35,-34,69,69,69,69,]),'MENOR_IGUAL_QUE':([28,35,37,51,96,97,121,279,],[70,70,-35,-34,70,70,70,70,]),'MAYOR_IGUAL_QUE':([28,35,37,51,96,97,121,279,],[71,71,-35,-34,71,71,71,71,]),'PARENTESIS_DER':([29,37,51,79,81,84,85,129,130,135,160,176,177,196,206,208,227,247,271,],[-30,-35,-34,159,160,-44,162,-47,-45,-31,-46,-36,207,228,-116,233,244,-117,272,]),'VARIABLECLASE':([31,32,34,37,46,48,51,52,94,95,146,147,156,163,164,165,180,183,185,186,188,202,205,207,230,233,238,239,243,258,260,269,272,],[77,-48,-49,-35,123,123,-34,123,123,-118,-103,-104,77,-101,-105,-102,123,123,123,123,123,123,-119,123,123,123,123,123,123,-153,123,-152,123,]),'TRIPLE_IGUAL':([36,228,],[87,-87,]),'COMA':([37,51,73,74,75,76,77,78,91,101,102,103,104,105,106,107,178,198,199,200,201,206,242,],[-35,-34,156,-55,-56,-57,-58,-59,169,-82,179,-76,-77,-78,-79,-80,-81,-145,-146,-148,-147,231,257,]),'AND':([37,51,95,146,147,163,164,165,],[-35,-34,174,-103,-104,-101,-105,-102,]),'OR':([37,51,95,146,147,163,164,165,],[-35,-34,175,-103,-104,-101,-105,-102,]),'LLAVE_DER':([37,39,51,89,91,197,198,199,200,201,],[-35,90,-34,168,-149,-150,-145,-146,-148,-147,]),'CORCHETE_DER':([42,100,101,102,103,104,105,106,107,178,209,],[101,178,-82,-75,-76,-77,-78,-79,-80,-81,-74,]),'ID_CLASE':([49,],[126,]),'TRUE':([63,182,240,],[144,144,144,]),'FALSE':([63,182,240,],[145,145,145,]),'EACH':([65,155,],[151,193,]),'TO_F':([65,],[152,]),'CONCAT':([65,189,],[153,153,]),'SORT':([65,],[154,]),'FOR':([65,],[155,]),'TRES_PUNTOS':([82,83,176,],[161,-36,-36,]),'CHOMP':([88,],[167,]),'ASIGNA_HASH':([92,93,],[170,171,]),'BARRA':([150,191,225,242,265,],[190,226,241,258,269,]),'INITIALIZE':([250,],[263,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,241,],[1,255,]),'operacionAritmetica':([0,33,46,48,52,53,63,80,94,180,182,183,184,185,188,202,207,230,233,240,241,243,260,272,],[2,81,110,110,110,130,130,81,110,110,130,110,130,110,110,110,110,110,110,130,2,110,110,110,]),'comparacion_simbolo':([0,241,],[3,3,]),'input_concatenacion':([0,63,182,184,240,241,],[4,142,142,218,142,4,]),'asignacion':([0,46,48,52,94,180,183,185,186,188,202,207,230,233,238,239,241,243,260,272,],[5,111,111,111,111,111,111,111,222,111,111,111,111,111,222,222,5,111,111,278,]),'impresion':([0,46,48,52,94,180,183,185,188,202,207,230,233,241,243,260,272,],[6,112,112,112,112,112,112,112,112,112,112,112,112,6,112,112,112,]),'impresion_vacia':([0,46,48,52,94,180,183,185,188,202,207,230,233,241,243,260,272,],[7,113,113,113,113,113,113,113,113,113,113,113,113,7,113,113,113,]),'expresiones_booleanas':([0,40,45,46,48,52,94,122,158,173,180,183,185,188,202,204,207,230,233,241,243,260,272,],[8,95,108,114,114,114,114,95,95,205,114,114,114,114,114,95,114,114,114,8,114,114,114,]),'solicitudDatosTeclado':([0,46,48,52,94,180,183,185,188,202,207,230,233,241,243,260,272,],[9,115,115,115,115,115,115,115,115,115,115,115,115,9,115,115,115,]),'hashes':([0,46,48,52,63,94,180,182,183,184,185,188,202,207,230,233,240,241,243,260,272,],[10,116,116,116,139,116,116,139,116,216,116,116,116,116,116,116,139,10,116,116,116,]),'estructura_if':([0,46,48,52,94,180,183,185,188,202,207,230,233,241,243,260,272,],[11,117,117,117,117,117,117,117,117,117,117,117,117,11,117,117,117,]),'funciones':([0,241,272,],[12,12,276,]),'funcionesEstructuras':([0,241,],[13,13,]),'array':([0,42,63,179,182,184,240,241,],[14,106,141,106,141,217,141,14,]),'each_array':([0,241,],[15,15,]),'comentarios':([0,241,],[16,16,]),'each_hash':([0,241,],[17,17,]),'sentencia_while':([0,46,48,52,94,180,183,185,188,202,207,230,233,241,243,260,272,],[18,119,119,119,119,210,119,119,119,119,119,119,119,18,119,119,119,]),'sentencia_case':([0,241,],[19,19,]),'sentencias_when':([0,47,241,],[20,124,20,]),'sentencia_until':([0,241,],[21,21,]),'definicion_clase':([0,241,],[22,22,]),'entero_a_flotante':([0,241,],[23,23,]),'expresionNumerica':([0,33,46,48,52,53,63,80,94,180,182,183,184,185,188,202,207,230,233,240,241,243,260,272,],[24,24,24,24,24,129,138,24,24,24,138,24,215,24,24,24,24,24,24,138,24,24,24,24,]),'valorSimbolo':([0,60,61,241,],[25,131,133,25,]),'concatenacionSimpleCadena':([0,63,182,184,240,241,],[26,26,26,26,26,26,]),'concatenacion_funcion':([0,63,182,184,240,241,],[27,27,27,27,27,27,]),'valor_print':([0,46,48,52,94,180,183,185,188,202,207,230,233,241,243,260,272,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'valorNumerico':([0,31,33,40,45,46,48,52,53,63,64,80,86,94,122,156,158,170,171,173,180,182,183,184,185,188,202,204,207,230,233,240,241,243,260,272,],[35,75,84,96,96,35,35,35,84,84,147,84,163,35,96,75,96,198,201,96,35,84,35,84,35,35,35,96,35,35,35,84,35,35,35,35,]),'rangos':([0,40,45,46,48,52,94,122,158,173,180,183,185,188,202,204,207,230,233,241,243,260,272,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'sentencia_when':([0,47,109,241,],[47,47,181,47,]),'valorCadena':([0,62,63,127,182,184,192,240,241,],[50,134,50,187,50,50,227,50,50,]),'operadores':([24,129,138,215,],[53,53,53,53,]),'operadoresComparacion':([28,35,96,97,121,279,],[64,86,86,64,64,64,]),'valores':([31,156,],[72,194,]),'valor':([31,156,],[73,73,]),'soloEnteros':([33,98,161,],[82,82,196,]),'elemento_hash':([39,],[89,]),'claveValor':([39,169,],[91,197,]),'condicionIf':([40,122,158,204,],[94,183,195,230,]),'elementos_array':([42,179,],[100,209,]),'elemento_array':([42,179,],[102,102,]),'declaracion':([46,48,52,94,180,183,185,188,202,207,230,233,243,260,272,],[109,125,128,172,211,172,219,224,229,232,246,249,259,267,275,]),'asignacion_clase':([46,48,52,94,180,183,185,186,188,202,207,230,233,238,239,243,260,272,],[118,118,118,118,118,118,118,221,118,118,118,118,118,221,221,118,118,277,]),'estructura_ifUnaLinea':([46,48,52,73,94,180,183,185,188,202,207,230,233,243,260,272,],[120,120,120,157,120,120,120,120,120,120,120,120,120,120,120,120,]),'booleanos':([63,182,240,],[143,213,253,]),'funcionesArray':([65,],[148,]),'funcionesNumeros':([65,],[149,]),'funcionesFormatoImpresion':([88,],[166,]),'funcionesComparacion':([95,],[173,]),'estructura_secundaria_if':([172,246,],[203,261,]),'argumentos':([177,231,268,],[208,247,271,]),'cuerpoVariables':([186,238,239,272,],[220,251,252,273,]),'each_args_hash':([226,],[243,]),'cuerpo_each':([241,],[254,]),'vacio':([241,],[256,]),'cuerpoClase':([272,],[274,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> operacionAritmetica','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> comparacion_simbolo','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> input_concatenacion','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> impresion','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> impresion_vacia','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> expresiones_booleanas','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> solicitudDatosTeclado','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> hashes','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> estructura_if','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> funcionesEstructuras','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> array','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> each_array','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> comentarios','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> each_hash','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> sentencia_while','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('cuerpo -> sentencia_case','cuerpo',1,'p_cuerpo','sintactico.py',30),
  ('cuerpo -> sentencias_when','cuerpo',1,'p_cuerpo','sintactico.py',31),
  ('cuerpo -> sentencia_until','cuerpo',1,'p_cuerpo','sintactico.py',32),
  ('cuerpo -> definicion_clase','cuerpo',1,'p_cuerpo','sintactico.py',33),
  ('cuerpo -> entero_a_flotante','cuerpo',1,'p_cuerpo','sintactico.py',34),
  ('valorSimbolo -> SIMBOLO','valorSimbolo',1,'p_valorSimbolo','sintactico.py',40),
  ('valorSimbolo -> VARIABLE','valorSimbolo',1,'p_valorSimbolo','sintactico.py',41),
  ('comparacion_simbolo -> valorSimbolo IGUAL_DOBLEP valorSimbolo','comparacion_simbolo',3,'p_comparacion_simbolo','sintactico.py',67),
  ('comparacion_simbolo -> valorSimbolo DIFERENTE valorSimbolo','comparacion_simbolo',3,'p_comparacion_simbolo','sintactico.py',68),
  ('input_concatenacion -> concatenacionSimpleCadena','input_concatenacion',1,'p_input_concatenacion','sintactico.py',80),
  ('input_concatenacion -> concatenacion_funcion','input_concatenacion',1,'p_input_concatenacion','sintactico.py',81),
  ('concatenacion_funcion -> VARIABLE PUNTO CONCAT PARENTESIS_IZ valorCadena PARENTESIS_DER','concatenacion_funcion',6,'p_concatenacion_funcion','sintactico.py',87),
  ('valorCadena -> CADENA','valorCadena',1,'p_valorCadena','sintactico.py',100),
  ('valorCadena -> VARIABLE','valorCadena',1,'p_valorCadena','sintactico.py',101),
  ('concatenacionSimpleCadena -> valorCadena MAS valorCadena','concatenacionSimpleCadena',3,'p_concatenacionSimpleCadena','sintactico.py',133),
  ('concatenacionSimpleCadena -> concatenacionSimpleCadena MAS valorCadena','concatenacionSimpleCadena',3,'p_concatenacionSimpleCadena','sintactico.py',134),
  ('valorNumerico -> FLOTANTE','valorNumerico',1,'p_valorNumerico','sintactico.py',153),
  ('valorNumerico -> ENTERO','valorNumerico',1,'p_valorNumerico','sintactico.py',154),
  ('soloEnteros -> ENTERO','soloEnteros',1,'p_soloEnteros','sintactico.py',166),
  ('entero_a_flotante -> VARIABLE PUNTO TO_F','entero_a_flotante',3,'p_entero_a_flotante','sintactico.py',171),
  ('operadores -> MAS','operadores',1,'p_operadores','sintactico.py',186),
  ('operadores -> MENOS','operadores',1,'p_operadores','sintactico.py',187),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',188),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',189),
  ('operadores -> EXPONENCIACION','operadores',1,'p_operadores','sintactico.py',190),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',191),
  ('expresionNumerica -> valorNumerico','expresionNumerica',1,'p_expresionNumerica','sintactico.py',196),
  ('expresionNumerica -> operacionAritmetica','expresionNumerica',1,'p_expresionNumerica','sintactico.py',197),
  ('expresionNumerica -> PARENTESIS_IZ operacionAritmetica PARENTESIS_DER','expresionNumerica',3,'p_expresionNumerica','sintactico.py',198),
  ('operacionAritmetica -> expresionNumerica operadores expresionNumerica','operacionAritmetica',3,'p_operacionAritmetica','sintactico.py',205),
  ('valor_print -> PRINT','valor_print',1,'p_valor_print','sintactico.py',227),
  ('valor_print -> PUTS','valor_print',1,'p_valor_print','sintactico.py',228),
  ('valores -> valor','valores',1,'p_valores','sintactico.py',233),
  ('valores -> valor COMA valores','valores',3,'p_valores','sintactico.py',234),
  ('valores -> valor estructura_ifUnaLinea','valores',2,'p_valores','sintactico.py',235),
  ('booleanos -> TRUE','booleanos',1,'p_booleanos','sintactico.py',242),
  ('booleanos -> FALSE','booleanos',1,'p_booleanos','sintactico.py',243),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',250),
  ('valor -> valorNumerico','valor',1,'p_valor','sintactico.py',251),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',252),
  ('valor -> VARIABLECLASE','valor',1,'p_valor','sintactico.py',253),
  ('valor -> SIMBOLO','valor',1,'p_valor','sintactico.py',254),
  ('impresion -> valor_print valores','impresion',2,'p_impresion','sintactico.py',273),
  ('asignacion_clase -> VARIABLECLASE IGUAL CADENA','asignacion_clase',3,'p_asignacion_clase','sintactico.py',282),
  ('asignacion_clase -> VARIABLECLASE IGUAL expresionNumerica','asignacion_clase',3,'p_asignacion_clase','sintactico.py',283),
  ('asignacion_clase -> VARIABLECLASE IGUAL hashes','asignacion_clase',3,'p_asignacion_clase','sintactico.py',284),
  ('asignacion_clase -> VARIABLECLASE IGUAL array','asignacion_clase',3,'p_asignacion_clase','sintactico.py',285),
  ('asignacion_clase -> VARIABLECLASE IGUAL input_concatenacion','asignacion_clase',3,'p_asignacion_clase','sintactico.py',286),
  ('asignacion_clase -> VARIABLE IGUAL booleanos','asignacion_clase',3,'p_asignacion_clase','sintactico.py',287),
  ('asignacion -> VARIABLE IGUAL CADENA','asignacion',3,'p_asignacion','sintactico.py',292),
  ('asignacion -> VARIABLE IGUAL expresionNumerica','asignacion',3,'p_asignacion','sintactico.py',293),
  ('asignacion -> VARIABLE IGUAL hashes','asignacion',3,'p_asignacion','sintactico.py',294),
  ('asignacion -> VARIABLE IGUAL SIMBOLO','asignacion',3,'p_asignacion','sintactico.py',295),
  ('asignacion -> VARIABLE IGUAL array','asignacion',3,'p_asignacion','sintactico.py',296),
  ('asignacion -> VARIABLE IGUAL input_concatenacion','asignacion',3,'p_asignacion','sintactico.py',297),
  ('asignacion -> VARIABLE IGUAL booleanos','asignacion',3,'p_asignacion','sintactico.py',298),
  ('elementos_array -> elemento_array COMA elementos_array','elementos_array',3,'p_elementos_array','sintactico.py',308),
  ('elementos_array -> elemento_array','elementos_array',1,'p_elementos_array','sintactico.py',309),
  ('elemento_array -> CADENA','elemento_array',1,'p_elemento_array','sintactico.py',317),
  ('elemento_array -> ENTERO','elemento_array',1,'p_elemento_array','sintactico.py',318),
  ('elemento_array -> FLOTANTE','elemento_array',1,'p_elemento_array','sintactico.py',319),
  ('elemento_array -> array','elemento_array',1,'p_elemento_array','sintactico.py',320),
  ('elemento_array -> VARIABLE','elemento_array',1,'p_elemento_array','sintactico.py',321),
  ('array -> CORCHETE_IZ elementos_array CORCHETE_DER','array',3,'p_array','sintactico.py',329),
  ('array -> CORCHETE_IZ CORCHETE_DER','array',2,'p_array','sintactico.py',330),
  ('each_array -> VARIABLE PUNTO DO BARRA VARIABLE BARRA cuerpo_each END','each_array',8,'p_each_array','sintactico.py',339),
  ('cuerpo_each -> cuerpo','cuerpo_each',1,'p_cuerpo_each','sintactico.py',343),
  ('cuerpo_each -> vacio','cuerpo_each',1,'p_cuerpo_each','sintactico.py',344),
  ('vacio -> <empty>','vacio',0,'p_vacio','sintactico.py',348),
  ('rangos -> PARENTESIS_IZ soloEnteros TRES_PUNTOS soloEnteros PARENTESIS_DER','rangos',5,'p_rangos','sintactico.py',354),
  ('comentarios -> COMENTARIO','comentarios',1,'p_comentarios','sintactico.py',359),
  ('comentarios -> COMENTARIO_MULTI','comentarios',1,'p_comentarios','sintactico.py',360),
  ('impresion_vacia -> PRINT PARENTESIS_IZ PARENTESIS_DER','impresion_vacia',3,'p_impresion_vacia','sintactico.py',364),
  ('impresion_vacia -> PUTS PARENTESIS_IZ PARENTESIS_DER','impresion_vacia',3,'p_impresion_vacia','sintactico.py',365),
  ('impresion_vacia -> PUTS','impresion_vacia',1,'p_impresion_vacia','sintactico.py',366),
  ('operadoresComparacion -> IGUAL_DOBLEP','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',371),
  ('operadoresComparacion -> DIFERENTE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',372),
  ('operadoresComparacion -> MAYOR_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',373),
  ('operadoresComparacion -> MENOR_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',374),
  ('operadoresComparacion -> MENOR_IGUAL_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',375),
  ('operadoresComparacion -> MAYOR_IGUAL_QUE','operadoresComparacion',1,'p_operadoresComparacion','sintactico.py',376),
  ('funcionesComparacion -> AND','funcionesComparacion',1,'p_funcionesComparacion','sintactico.py',380),
  ('funcionesComparacion -> OR','funcionesComparacion',1,'p_funcionesComparacion','sintactico.py',381),
  ('expresiones_booleanas -> valorNumerico operadoresComparacion valorNumerico','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',385),
  ('expresiones_booleanas -> rangos TRIPLE_IGUAL ENTERO','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',386),
  ('expresiones_booleanas -> VARIABLE operadoresComparacion VARIABLE','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',387),
  ('expresiones_booleanas -> VARIABLE operadoresComparacion valorNumerico','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',388),
  ('expresiones_booleanas -> valorNumerico operadoresComparacion VARIABLE','expresiones_booleanas',3,'p_expresiones_booleanas','sintactico.py',389),
  ('solicitudDatosTeclado -> GETS','solicitudDatosTeclado',1,'p_solicitudDatosTeclado','sintactico.py',456),
  ('solicitudDatosTeclado -> GETS PUNTO funcionesFormatoImpresion','solicitudDatosTeclado',3,'p_solicitudDatosTeclado','sintactico.py',457),
  ('funciones -> DEF VARIABLE PARENTESIS_IZ PARENTESIS_DER declaracion END','funciones',6,'p_funciones','sintactico.py',462),
  ('funciones -> DEF VARIABLE PARENTESIS_IZ argumentos PARENTESIS_DER declaracion END','funciones',7,'p_funciones','sintactico.py',463),
  ('funcionesArray -> SORT','funcionesArray',1,'p_funcionesArray','sintactico.py',467),
  ('funcionesArray -> FOR EACH','funcionesArray',2,'p_funcionesArray','sintactico.py',468),
  ('funcionesFormatoImpresion -> CHOMP','funcionesFormatoImpresion',1,'p_funcionesFormatoImpresion','sintactico.py',472),
  ('funcionesNumeros -> TO_F','funcionesNumeros',1,'p_funcionesNumeros','sintactico.py',476),
  ('funcionesEstructuras -> VARIABLE PUNTO funcionesArray','funcionesEstructuras',3,'p_funcionesEstructuras','sintactico.py',480),
  ('funcionesEstructuras -> VARIABLE PUNTO funcionesNumeros','funcionesEstructuras',3,'p_funcionesEstructuras','sintactico.py',481),
  ('argumentos -> VARIABLE','argumentos',1,'p_argumentos','sintactico.py',501),
  ('argumentos -> VARIABLE COMA argumentos','argumentos',3,'p_argumentos','sintactico.py',502),
  ('condicionIf -> expresiones_booleanas','condicionIf',1,'p_condicionIf','sintactico.py',507),
  ('condicionIf -> expresiones_booleanas funcionesComparacion expresiones_booleanas','condicionIf',3,'p_condicionIf','sintactico.py',508),
  ('estructura_if -> IF condicionIf declaracion ELSE declaracion END','estructura_if',6,'p_estructura_if','sintactico.py',512),
  ('estructura_if -> IF condicionIf declaracion estructura_secundaria_if','estructura_if',4,'p_estructura_if','sintactico.py',513),
  ('estructura_ifUnaLinea -> IF condicionIf','estructura_ifUnaLinea',2,'p_estructura_ifUnaLinea','sintactico.py',517),
  ('estructura_secundaria_if -> ELSEIF condicionIf declaracion ELSE declaracion END','estructura_secundaria_if',6,'p_estructura_secundaria_if','sintactico.py',521),
  ('estructura_secundaria_if -> ELSEIF condicionIf declaracion estructura_secundaria_if','estructura_secundaria_if',4,'p_estructura_secundaria_if','sintactico.py',522),
  ('declaracion -> operacionAritmetica','declaracion',1,'p_declaracion','sintactico.py',526),
  ('declaracion -> asignacion','declaracion',1,'p_declaracion','sintactico.py',527),
  ('declaracion -> impresion','declaracion',1,'p_declaracion','sintactico.py',528),
  ('declaracion -> impresion_vacia','declaracion',1,'p_declaracion','sintactico.py',529),
  ('declaracion -> expresiones_booleanas','declaracion',1,'p_declaracion','sintactico.py',530),
  ('declaracion -> solicitudDatosTeclado','declaracion',1,'p_declaracion','sintactico.py',531),
  ('declaracion -> hashes','declaracion',1,'p_declaracion','sintactico.py',532),
  ('declaracion -> estructura_if','declaracion',1,'p_declaracion','sintactico.py',533),
  ('declaracion -> asignacion_clase','declaracion',1,'p_declaracion','sintactico.py',534),
  ('declaracion -> sentencia_while','declaracion',1,'p_declaracion','sintactico.py',535),
  ('declaracion -> estructura_ifUnaLinea','declaracion',1,'p_declaracion','sintactico.py',536),
  ('sentencia_while -> WHILE expresiones_booleanas DO sentencia_while END','sentencia_while',5,'p_sentencia_while','sintactico.py',540),
  ('sentencia_while -> WHILE expresiones_booleanas DO declaracion END','sentencia_while',5,'p_sentencia_while','sintactico.py',541),
  ('sentencia_case -> CASE declaracion sentencia_when END','sentencia_case',4,'p_sentencia_case','sintactico.py',545),
  ('sentencias_when -> sentencia_when','sentencias_when',1,'p_sentencias_when','sintactico.py',549),
  ('sentencias_when -> sentencia_when sentencias_when','sentencias_when',2,'p_sentencias_when','sintactico.py',550),
  ('sentencia_when -> WHEN declaracion IGUAL_DOBLEP declaracion','sentencia_when',4,'p_sentencia_when','sintactico.py',554),
  ('sentencia_until -> UNTIL declaracion DO declaracion END','sentencia_until',5,'p_sentencia_until','sintactico.py',558),
  ('hashes -> LLAVE_IZ elemento_hash LLAVE_DER','hashes',3,'p_hashes','sintactico.py',563),
  ('hashes -> LLAVE_IZ LLAVE_DER','hashes',2,'p_hashes','sintactico.py',564),
  ('claveValor -> VARIABLE ASIGNA_HASH valorNumerico','claveValor',3,'p_claveValor','sintactico.py',568),
  ('claveValor -> VARIABLE ASIGNA_HASH CADENA','claveValor',3,'p_claveValor','sintactico.py',569),
  ('claveValor -> CADENA ASIGNA_HASH valorNumerico','claveValor',3,'p_claveValor','sintactico.py',570),
  ('claveValor -> CADENA ASIGNA_HASH CADENA','claveValor',3,'p_claveValor','sintactico.py',571),
  ('elemento_hash -> claveValor','elemento_hash',1,'p_elemento_hash','sintactico.py',575),
  ('elemento_hash -> claveValor COMA claveValor','elemento_hash',3,'p_elemento_hash','sintactico.py',576),
  ('each_hash -> VARIABLE PUNTO EACH DO BARRA each_args_hash declaracion END','each_hash',8,'p_each_hash','sintactico.py',580),
  ('each_args_hash -> VARIABLE COMA VARIABLE BARRA','each_args_hash',4,'p_each_args_hash','sintactico.py',584),
  ('each_args_hash -> VARIABLE BARRA','each_args_hash',2,'p_each_args_hash','sintactico.py',585),
  ('definicion_clase -> CLASS ID_CLASE NEWLINE cuerpoVariables NEWLINE DEF INITIALIZE PARENTESIS_IZ argumentos PARENTESIS_DER cuerpoClase END','definicion_clase',12,'p_definicion_clase','sintactico.py',589),
  ('cuerpoVariables -> asignacion_clase','cuerpoVariables',1,'p_cuerpoVariables','sintactico.py',593),
  ('cuerpoVariables -> asignacion','cuerpoVariables',1,'p_cuerpoVariables','sintactico.py',594),
  ('cuerpoVariables -> asignacion_clase NEWLINE cuerpoVariables','cuerpoVariables',3,'p_cuerpoVariables','sintactico.py',595),
  ('cuerpoVariables -> asignacion NEWLINE cuerpoVariables','cuerpoVariables',3,'p_cuerpoVariables','sintactico.py',596),
  ('cuerpoClase -> cuerpoVariables','cuerpoClase',1,'p_cuerpoClase','sintactico.py',600),
  ('cuerpoClase -> declaracion','cuerpoClase',1,'p_cuerpoClase','sintactico.py',601),
  ('cuerpoClase -> funciones','cuerpoClase',1,'p_cuerpoClase','sintactico.py',602),
]
